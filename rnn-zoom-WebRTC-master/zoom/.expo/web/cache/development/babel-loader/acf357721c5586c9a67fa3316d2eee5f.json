{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deepClone = deepClone;\nexports.normalizeOfferAnswerOptions = normalizeOfferAnswerOptions;\nexports.normalizeConstraints = normalizeConstraints;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar DEFAULT_AUDIO_CONSTRAINTS = {};\nvar DEFAULT_VIDEO_CONSTRAINTS = {\n  facingMode: 'user',\n  frameRate: 30,\n  height: 720,\n  width: 1280\n};\nvar ASPECT_RATIO = 16 / 9;\nvar STANDARD_OA_OPTIONS = {\n  icerestart: 'IceRestart',\n  offertoreceiveaudio: 'OfferToReceiveAudio',\n  offertoreceivevideo: 'OfferToReceiveVideo',\n  voiceactivitydetection: 'VoiceActivityDetection'\n};\n\nfunction getDefaultMediaConstraints(mediaType) {\n  switch (mediaType) {\n    case 'audio':\n      return DEFAULT_AUDIO_CONSTRAINTS;\n\n    case 'video':\n      return DEFAULT_VIDEO_CONSTRAINTS;\n\n    default:\n      throw new TypeError(\"Invalid media type: \" + mediaType);\n  }\n}\n\nfunction extractString(constraints, prop) {\n  var value = constraints[prop];\n  var type = typeof value;\n\n  if (type === 'object') {\n    for (var _i = 0, _arr = ['exact', 'ideal']; _i < _arr.length; _i++) {\n      var v = _arr[_i];\n\n      if (value[v]) {\n        return value[v];\n      }\n    }\n  } else if (type === 'string') {\n    return value;\n  }\n}\n\nfunction extractNumber(constraints, prop) {\n  var value = constraints[prop];\n  var type = typeof value;\n\n  if (type === 'number') {\n    return Number.parseInt(value);\n  } else if (type === 'object') {\n    for (var _i2 = 0, _arr2 = ['exact', 'ideal', 'min', 'max']; _i2 < _arr2.length; _i2++) {\n      var v = _arr2[_i2];\n\n      if (value[v]) {\n        return Number.parseInt(value[v]);\n      }\n    }\n  }\n}\n\nfunction normalizeMediaConstraints(constraints, mediaType) {\n  switch (mediaType) {\n    case 'audio':\n      return constraints;\n\n    case 'video':\n      {\n        var c;\n\n        if (constraints.mandatory) {\n          c = {\n            deviceId: extractString(constraints.optional || {}, 'sourceId'),\n            facingMode: extractString(constraints, 'facingMode'),\n            frameRate: extractNumber(constraints.mandatory, 'minFrameRate'),\n            height: extractNumber(constraints.mandatory, 'minHeight'),\n            width: extractNumber(constraints.mandatory, 'minWidth')\n          };\n        } else {\n          c = {\n            deviceId: extractString(constraints, 'deviceId'),\n            facingMode: extractString(constraints, 'facingMode'),\n            frameRate: extractNumber(constraints, 'frameRate'),\n            height: extractNumber(constraints, 'height'),\n            width: extractNumber(constraints, 'width')\n          };\n        }\n\n        if (!c.deviceId) {\n          delete c.deviceId;\n        }\n\n        if (!c.facingMode || c.facingMode !== 'user' && c.facingMode !== 'environment') {\n          c.facingMode = DEFAULT_VIDEO_CONSTRAINTS.facingMode;\n        }\n\n        if (!c.frameRate) {\n          c.frameRate = DEFAULT_VIDEO_CONSTRAINTS.frameRate;\n        }\n\n        if (!c.height && !c.width) {\n          c.height = DEFAULT_VIDEO_CONSTRAINTS.height;\n          c.width = DEFAULT_VIDEO_CONSTRAINTS.width;\n        } else if (!c.height) {\n          c.height = Math.round(c.width / ASPECT_RATIO);\n        } else if (!c.width) {\n          c.width = Math.round(c.height * ASPECT_RATIO);\n        }\n\n        return c;\n      }\n\n    default:\n      throw new TypeError(\"Invalid media type: \" + mediaType);\n  }\n}\n\nfunction deepClone(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n\nfunction normalizeOfferAnswerOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var newOptions = {};\n\n  if (!options) {\n    return newOptions;\n  }\n\n  if (options.mandatory) {\n    options = options.mandatory;\n  }\n\n  for (var _i3 = 0, _Object$entries = Object.entries(options); _i3 < _Object$entries.length; _i3++) {\n    var _ref = _Object$entries[_i3];\n\n    var _ref2 = (0, _slicedToArray2.default)(_ref, 2);\n\n    var key = _ref2[0];\n    var value = _ref2[1];\n    var newKey = STANDARD_OA_OPTIONS[key.toLowerCase()];\n\n    if (newKey) {\n      newOptions[newKey] = String(Boolean(value));\n    }\n  }\n\n  return newOptions;\n}\n\nfunction normalizeConstraints(constraints) {\n  var c = deepClone(constraints);\n\n  for (var _i4 = 0, _arr3 = ['audio', 'video']; _i4 < _arr3.length; _i4++) {\n    var mediaType = _arr3[_i4];\n    var mediaTypeConstraints = c[mediaType];\n    var typeofMediaTypeConstraints = typeof mediaTypeConstraints;\n\n    if (typeofMediaTypeConstraints !== 'undefined') {\n      if (typeofMediaTypeConstraints === 'boolean') {\n        if (mediaTypeConstraints) {\n          c[mediaType] = getDefaultMediaConstraints(mediaType);\n        }\n      } else if (typeofMediaTypeConstraints === 'object') {\n        c[mediaType] = normalizeMediaConstraints(mediaTypeConstraints, mediaType);\n      } else {\n        throw new TypeError(\"constraints.\" + mediaType + \" is neither a boolean nor a dictionary\");\n      }\n    }\n  }\n\n  return c;\n}","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/RTCUtil.js"],"names":["DEFAULT_AUDIO_CONSTRAINTS","DEFAULT_VIDEO_CONSTRAINTS","facingMode","frameRate","height","width","ASPECT_RATIO","STANDARD_OA_OPTIONS","icerestart","offertoreceiveaudio","offertoreceivevideo","voiceactivitydetection","getDefaultMediaConstraints","mediaType","TypeError","extractString","constraints","prop","value","type","v","extractNumber","Number","parseInt","normalizeMediaConstraints","c","mandatory","deviceId","optional","Math","round","deepClone","obj","JSON","parse","stringify","normalizeOfferAnswerOptions","options","newOptions","Object","entries","key","newKey","toLowerCase","String","Boolean","normalizeConstraints","mediaTypeConstraints","typeofMediaTypeConstraints"],"mappings":"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","sourcesContent":["'use strict';\n\nconst DEFAULT_AUDIO_CONSTRAINTS = {};\n\nconst DEFAULT_VIDEO_CONSTRAINTS = {\n    facingMode: 'user',\n    frameRate: 30,\n    height: 720,\n    width: 1280\n};\n\nconst ASPECT_RATIO = 16 / 9;\n\nconst STANDARD_OA_OPTIONS = {\n    icerestart: 'IceRestart',\n    offertoreceiveaudio: 'OfferToReceiveAudio',\n    offertoreceivevideo: 'OfferToReceiveVideo',\n    voiceactivitydetection: 'VoiceActivityDetection'\n};\n\nfunction getDefaultMediaConstraints(mediaType) {\n    switch(mediaType) {\n    case 'audio':\n        return DEFAULT_AUDIO_CONSTRAINTS;\n    case 'video':\n        return DEFAULT_VIDEO_CONSTRAINTS;\n    default:\n        throw new TypeError(`Invalid media type: ${mediaType}`);\n    }\n}\n\nfunction extractString(constraints, prop) {\n    const value = constraints[prop];\n    const type = typeof value;\n\n    if (type === 'object') {\n        for (const v of [ 'exact', 'ideal' ]) {\n            if (value[v]) {\n                return value[v];\n            }\n        }\n    } else if (type === 'string') {\n        return value;\n    }\n}\n\nfunction extractNumber(constraints, prop) {\n    const value = constraints[prop];\n    const type = typeof value;\n\n    if (type === 'number') {\n        return Number.parseInt(value);\n    } else if (type === 'object') {\n        for (const v of [ 'exact', 'ideal', 'min', 'max' ]) {\n            if (value[v]) {\n                return Number.parseInt(value[v]);\n            }\n        }\n    }\n}\n\nfunction normalizeMediaConstraints(constraints, mediaType) {\n    switch(mediaType) {\n    case 'audio':\n        return constraints;\n    case 'video': {\n        let c;\n        if (constraints.mandatory) {\n            // Old style.\n            c = {\n                deviceId: extractString(constraints.optional || {}, 'sourceId'),\n                facingMode: extractString(constraints, 'facingMode'),\n                frameRate: extractNumber(constraints.mandatory, 'minFrameRate'),\n                height: extractNumber(constraints.mandatory, 'minHeight'),\n                width: extractNumber(constraints.mandatory, 'minWidth')\n            };\n        } else {\n            // New style.\n            c = {\n                deviceId: extractString(constraints, 'deviceId'),\n                facingMode: extractString(constraints, 'facingMode'),\n                frameRate: extractNumber(constraints, 'frameRate'),\n                height: extractNumber(constraints, 'height'),\n                width: extractNumber(constraints, 'width')\n            };\n        }\n\n        if (!c.deviceId) {\n            delete c.deviceId;\n        }\n\n        if (!c.facingMode || (c.facingMode !== 'user' && c.facingMode !== 'environment')) {\n            c.facingMode = DEFAULT_VIDEO_CONSTRAINTS.facingMode;\n        }\n\n        if (!c.frameRate) {\n            c.frameRate = DEFAULT_VIDEO_CONSTRAINTS.frameRate;\n        }\n\n        if (!c.height && !c.width) {\n            c.height = DEFAULT_VIDEO_CONSTRAINTS.height;\n            c.width = DEFAULT_VIDEO_CONSTRAINTS.width;\n        } else if (!c.height) {\n            c.height = Math.round(c.width / ASPECT_RATIO);\n        } else if (!c.width) {\n            c.width = Math.round(c.height * ASPECT_RATIO);\n        }\n\n        return c;\n    }\n    default:\n        throw new TypeError(`Invalid media type: ${mediaType}`);\n    }\n}\n\n/**\n * Utility for deep cloning an object. Object.assign() only does a shallow copy.\n *\n * @param {Object} obj - object to be cloned\n * @return {Object} cloned obj\n */\nexport function deepClone(obj) {\n    return JSON.parse(JSON.stringify(obj));\n}\n\n/**\n * Normalize options passed to createOffer() / createAnswer().\n *\n * @param {Object} options - user supplied options\n * @return {Object} newOptions - normalized options\n */\nexport function normalizeOfferAnswerOptions(options = {}) {\n    const newOptions = {};\n\n    if (!options) {\n        return newOptions;\n    }\n\n    // Support legacy constraints.\n    if (options.mandatory) {\n        options = options.mandatory;\n    }\n\n    // Convert standard options into WebRTC internal constant names.\n    // See: https://github.com/jitsi/webrtc/blob/0cd6ce4de669bed94ba47b88cb71b9be0341bb81/sdk/media_constraints.cc#L113\n    for (const [ key, value ] of Object.entries(options)) {\n        const newKey = STANDARD_OA_OPTIONS[key.toLowerCase()];\n        if (newKey) {\n            newOptions[newKey] = String(Boolean(value));\n        }\n    }\n\n    return newOptions;\n}\n\n/**\n * Normalize the given constraints in something we can work with.\n */\nexport function normalizeConstraints(constraints) {\n    const c = deepClone(constraints);\n\n    for (const mediaType of [ 'audio', 'video' ]) {\n        const mediaTypeConstraints = c[mediaType];\n        const typeofMediaTypeConstraints = typeof mediaTypeConstraints;\n\n        if (typeofMediaTypeConstraints !== 'undefined') {\n            if (typeofMediaTypeConstraints === 'boolean') {\n                if (mediaTypeConstraints) {\n                    c[mediaType] = getDefaultMediaConstraints(mediaType);\n                }\n            } else if (typeofMediaTypeConstraints === 'object') {\n                c[mediaType] = normalizeMediaConstraints(mediaTypeConstraints, mediaType);\n            } else {\n                throw new TypeError(`constraints.${mediaType} is neither a boolean nor a dictionary`);\n            }\n        }\n    }\n\n    return c;\n}\n"]},"metadata":{},"sourceType":"script"}