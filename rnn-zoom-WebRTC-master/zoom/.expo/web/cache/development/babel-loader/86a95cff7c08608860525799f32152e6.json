{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _eventTargetShim = _interopRequireDefault(require(\"event-target-shim\"));\n\nvar _getDisplayMedia2 = _interopRequireDefault(require(\"./getDisplayMedia\"));\n\nvar _getUserMedia2 = _interopRequireDefault(require(\"./getUserMedia\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebRTCModule = _reactNative.NativeModules.WebRTCModule;\nvar MEDIA_DEVICES_EVENTS = ['devicechange'];\n\nvar MediaDevices = function (_EventTarget) {\n  (0, _inherits2.default)(MediaDevices, _EventTarget);\n\n  var _super = _createSuper(MediaDevices);\n\n  function MediaDevices() {\n    (0, _classCallCheck2.default)(this, MediaDevices);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(MediaDevices, [{\n    key: \"enumerateDevices\",\n    value: function enumerateDevices() {\n      return new Promise(function (resolve) {\n        return WebRTCModule.enumerateDevices(resolve);\n      });\n    }\n  }, {\n    key: \"getDisplayMedia\",\n    value: function getDisplayMedia(constraints) {\n      return (0, _getDisplayMedia2.default)(constraints);\n    }\n  }, {\n    key: \"getUserMedia\",\n    value: function getUserMedia(constraints) {\n      return (0, _getUserMedia2.default)(constraints);\n    }\n  }]);\n  return MediaDevices;\n}((0, _eventTargetShim.default)(MEDIA_DEVICES_EVENTS));\n\nvar _default = new MediaDevices();\n\nexports.default = _default;","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/MediaDevices.js"],"names":["WebRTCModule","NativeModules","MEDIA_DEVICES_EVENTS","MediaDevices","Promise","resolve","enumerateDevices","constraints"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAEA;;AACA;;AAEA;;AACA;;;;;;AAEA,IAAOA,YAAP,GAAuBC,0BAAvB,CAAOD,YAAP;AAEA,IAAME,oBAAoB,GAAG,CACzB,cADyB,CAA7B;;IAIMC,Y;;;;;;;;;;;;WAQF,4BAAmB;AACf,aAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,eAAIL,YAAY,CAACM,gBAAb,CAA8BD,OAA9B,CAAJ;AAAA,OAAnB,CAAP;AACH;;;WASD,yBAAgBE,WAAhB,EAA6B;AACzB,aAAO,+BAAgBA,WAAhB,CAAP;AACH;;;WAUD,sBAAaA,WAAb,EAA0B;AACtB,aAAO,4BAAaA,WAAb,CAAP;AACH;;;EAjCsB,8BAAYL,oBAAZ,C;;eAoCZ,IAAIC,YAAJ,E","sourcesContent":["'use strict';\n\nimport {NativeModules} from 'react-native';\nimport EventTarget from 'event-target-shim';\n\nimport getDisplayMedia from './getDisplayMedia';\nimport getUserMedia from './getUserMedia';\n\nconst {WebRTCModule} = NativeModules;\n\nconst MEDIA_DEVICES_EVENTS = [\n    'devicechange'\n];\n\nclass MediaDevices extends EventTarget(MEDIA_DEVICES_EVENTS) {\n    // TODO: implement.\n    ondevicechange: ?Function;\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code enumerateDevices}\n     * implementation.\n     */\n    enumerateDevices() {\n        return new Promise(resolve => WebRTCModule.enumerateDevices(resolve));\n    }\n\n    /**\n     * W3C \"Screen Capture\" compatible {@code getDisplayMedia} implementation.\n     * See: https://w3c.github.io/mediacapture-screen-share/\n     *\n     * @param {*} constraints\n     * @returns {Promise}\n     */\n    getDisplayMedia(constraints) {\n        return getDisplayMedia(constraints);\n    }\n\n    /**\n     * W3C \"Media Capture and Streams\" compatible {@code getUserMedia}\n     * implementation.\n     * See: https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-enumeratedevices\n     *\n     * @param {*} constraints \n     * @returns {Promise}\n     */\n    getUserMedia(constraints) {\n        return getUserMedia(constraints);\n    }\n}\n\nexport default new MediaDevices();\n"]},"metadata":{},"sourceType":"script"}