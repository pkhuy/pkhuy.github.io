{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventTargetShim = _interopRequireDefault(require(\"event-target-shim\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _MediaStream = _interopRequireDefault(require(\"./MediaStream\"));\n\nvar _MediaStreamEvent = _interopRequireDefault(require(\"./MediaStreamEvent\"));\n\nvar _MediaStreamTrack = _interopRequireDefault(require(\"./MediaStreamTrack\"));\n\nvar _MediaStreamTrackEvent = _interopRequireDefault(require(\"./MediaStreamTrackEvent\"));\n\nvar _RTCDataChannel = _interopRequireDefault(require(\"./RTCDataChannel\"));\n\nvar _RTCDataChannelEvent = _interopRequireDefault(require(\"./RTCDataChannelEvent\"));\n\nvar _RTCSessionDescription = _interopRequireDefault(require(\"./RTCSessionDescription\"));\n\nvar _RTCIceCandidate = _interopRequireDefault(require(\"./RTCIceCandidate\"));\n\nvar _RTCIceCandidateEvent = _interopRequireDefault(require(\"./RTCIceCandidateEvent\"));\n\nvar _RTCEvent = _interopRequireDefault(require(\"./RTCEvent\"));\n\nvar RTCUtil = _interopRequireWildcard(require(\"./RTCUtil\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebRTCModule = _reactNative.NativeModules.WebRTCModule;\nvar PEER_CONNECTION_EVENTS = ['connectionstatechange', 'icecandidate', 'icecandidateerror', 'iceconnectionstatechange', 'icegatheringstatechange', 'negotiationneeded', 'signalingstatechange', 'datachannel', 'addstream', 'removestream'];\nvar nextPeerConnectionId = 0;\n\nvar RTCPeerConnection = function (_EventTarget) {\n  (0, _inherits2.default)(RTCPeerConnection, _EventTarget);\n\n  var _super = _createSuper(RTCPeerConnection);\n\n  function RTCPeerConnection(configuration) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RTCPeerConnection);\n    _this = _super.call(this);\n    _this.signalingState = 'stable';\n    _this.iceGatheringState = 'new';\n    _this.connectionState = 'new';\n    _this.iceConnectionState = 'new';\n    _this._localStreams = [];\n    _this._remoteStreams = [];\n    _this._dataChannelIds = new Set();\n    _this._peerConnectionId = nextPeerConnectionId++;\n    WebRTCModule.peerConnectionInit(configuration, _this._peerConnectionId);\n\n    _this._registerEvents();\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(RTCPeerConnection, [{\n    key: \"addStream\",\n    value: function addStream(stream) {\n      var index = this._localStreams.indexOf(stream);\n\n      if (index !== -1) {\n        return;\n      }\n\n      WebRTCModule.peerConnectionAddStream(stream._reactTag, this._peerConnectionId);\n\n      this._localStreams.push(stream);\n    }\n  }, {\n    key: \"removeStream\",\n    value: function removeStream(stream) {\n      var index = this._localStreams.indexOf(stream);\n\n      if (index === -1) {\n        return;\n      }\n\n      this._localStreams.splice(index, 1);\n\n      WebRTCModule.peerConnectionRemoveStream(stream._reactTag, this._peerConnectionId);\n    }\n  }, {\n    key: \"createOffer\",\n    value: function createOffer(options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionCreateOffer(_this2._peerConnectionId, RTCUtil.normalizeOfferAnswerOptions(options), function (successful, data) {\n          if (successful) {\n            resolve(new _RTCSessionDescription.default(data));\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"createAnswer\",\n    value: function createAnswer() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionCreateAnswer(_this3._peerConnectionId, RTCUtil.normalizeOfferAnswerOptions(options), function (successful, data) {\n          if (successful) {\n            resolve(new _RTCSessionDescription.default(data));\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setConfiguration\",\n    value: function setConfiguration(configuration) {\n      WebRTCModule.peerConnectionSetConfiguration(configuration, this._peerConnectionId);\n    }\n  }, {\n    key: \"setLocalDescription\",\n    value: function setLocalDescription(sessionDescription) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionSetLocalDescription(sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription, _this4._peerConnectionId, function (successful, data) {\n          if (successful) {\n            _this4.localDescription = sessionDescription;\n            resolve();\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setRemoteDescription\",\n    value: function setRemoteDescription(sessionDescription) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionSetRemoteDescription(sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription, _this5._peerConnectionId, function (successful, data) {\n          if (successful) {\n            _this5.remoteDescription = sessionDescription;\n            resolve();\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"addIceCandidate\",\n    value: function addIceCandidate(candidate) {\n      var _this6 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionAddICECandidate(candidate.toJSON ? candidate.toJSON() : candidate, _this6._peerConnectionId, function (successful) {\n          if (successful) {\n            resolve();\n          } else {\n            reject(new Error('Failed to add ICE candidate'));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getStats\",\n    value: function getStats(track) {\n      var _this7 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionGetStats(track && track.id || '', _this7._peerConnectionId, function (success, data) {\n          if (success) {\n            try {\n              var stats = JSON.parse(data);\n              resolve(stats);\n            } catch (e) {\n              reject(e);\n            }\n          } else {\n            reject(new Error(data));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getLocalStreams\",\n    value: function getLocalStreams() {\n      return this._localStreams.slice();\n    }\n  }, {\n    key: \"getRemoteStreams\",\n    value: function getRemoteStreams() {\n      return this._remoteStreams.slice();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      WebRTCModule.peerConnectionClose(this._peerConnectionId);\n    }\n  }, {\n    key: \"_getTrack\",\n    value: function _getTrack(streamReactTag, trackId) {\n      var stream = this._remoteStreams.find(function (stream) {\n        return stream._reactTag === streamReactTag;\n      });\n\n      return stream && stream._tracks.find(function (track) {\n        return track.id === trackId;\n      });\n    }\n  }, {\n    key: \"_unregisterEvents\",\n    value: function _unregisterEvents() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"_registerEvents\",\n    value: function _registerEvents() {\n      var _this8 = this;\n\n      this._subscriptions = [_EventEmitter.default.addListener('peerConnectionOnRenegotiationNeeded', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        _this8.dispatchEvent(new _RTCEvent.default('negotiationneeded'));\n      }), _EventEmitter.default.addListener('peerConnectionIceConnectionChanged', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        _this8.iceConnectionState = ev.iceConnectionState;\n\n        _this8.dispatchEvent(new _RTCEvent.default('iceconnectionstatechange'));\n\n        if (ev.iceConnectionState === 'closed') {\n          _this8._unregisterEvents();\n        }\n      }), _EventEmitter.default.addListener('peerConnectionStateChanged', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        _this8.connectionState = ev.connectionState;\n\n        _this8.dispatchEvent(new _RTCEvent.default('connectionstatechange'));\n\n        if (ev.connectionState === 'closed') {\n          _this8._unregisterEvents();\n        }\n      }), _EventEmitter.default.addListener('peerConnectionSignalingStateChanged', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        _this8.signalingState = ev.signalingState;\n\n        _this8.dispatchEvent(new _RTCEvent.default('signalingstatechange'));\n      }), _EventEmitter.default.addListener('peerConnectionAddedStream', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        var stream = new _MediaStream.default(ev);\n\n        _this8._remoteStreams.push(stream);\n\n        _this8.dispatchEvent(new _MediaStreamEvent.default('addstream', {\n          stream: stream\n        }));\n      }), _EventEmitter.default.addListener('peerConnectionRemovedStream', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        var stream = _this8._remoteStreams.find(function (s) {\n          return s._reactTag === ev.streamId;\n        });\n\n        if (stream) {\n          var index = _this8._remoteStreams.indexOf(stream);\n\n          if (index !== -1) {\n            _this8._remoteStreams.splice(index, 1);\n          }\n        }\n\n        _this8.dispatchEvent(new _MediaStreamEvent.default('removestream', {\n          stream: stream\n        }));\n      }), _EventEmitter.default.addListener('mediaStreamTrackMuteChanged', function (ev) {\n        if (ev.peerConnectionId !== _this8._peerConnectionId) {\n          return;\n        }\n\n        var track = _this8._getTrack(ev.streamReactTag, ev.trackId);\n\n        if (track) {\n          track.muted = ev.muted;\n          var eventName = ev.muted ? 'mute' : 'unmute';\n          track.dispatchEvent(new _MediaStreamTrackEvent.default(eventName, {\n            track: track\n          }));\n        }\n      }), _EventEmitter.default.addListener('peerConnectionGotICECandidate', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        var candidate = new _RTCIceCandidate.default(ev.candidate);\n        var event = new _RTCIceCandidateEvent.default('icecandidate', {\n          candidate: candidate\n        });\n\n        _this8.dispatchEvent(event);\n      }), _EventEmitter.default.addListener('peerConnectionIceGatheringChanged', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        _this8.iceGatheringState = ev.iceGatheringState;\n\n        if (_this8.iceGatheringState === 'complete') {\n          _this8.dispatchEvent(new _RTCIceCandidateEvent.default('icecandidate', null));\n        }\n\n        _this8.dispatchEvent(new _RTCEvent.default('icegatheringstatechange'));\n      }), _EventEmitter.default.addListener('peerConnectionDidOpenDataChannel', function (ev) {\n        if (ev.id !== _this8._peerConnectionId) {\n          return;\n        }\n\n        var evDataChannel = ev.dataChannel;\n        var id = evDataChannel.id;\n\n        if (typeof id !== 'number' || id === -1) {\n          return;\n        }\n\n        var channel = new _RTCDataChannel.default(_this8._peerConnectionId, evDataChannel.label, evDataChannel);\n\n        _this8._dataChannelIds.add(id);\n\n        _this8.dispatchEvent(new _RTCDataChannelEvent.default('datachannel', {\n          channel: channel\n        }));\n      })];\n    }\n  }, {\n    key: \"createDataChannel\",\n    value: function createDataChannel(label, dataChannelDict) {\n      var id;\n      var dataChannelIds = this._dataChannelIds;\n\n      if (dataChannelDict && 'id' in dataChannelDict) {\n        id = dataChannelDict.id;\n\n        if (typeof id !== 'number') {\n          throw new TypeError('DataChannel id must be a number: ' + id);\n        }\n\n        if (dataChannelIds.has(id)) {\n          throw new ResourceInUse('DataChannel id already in use: ' + id);\n        }\n      } else {\n        for (id = 1; id < 65535 && dataChannelIds.has(id); ++id) {\n          ;\n        }\n\n        dataChannelDict = (0, _extends2.default)({\n          id: id\n        }, dataChannelDict);\n      }\n\n      WebRTCModule.createDataChannel(this._peerConnectionId, label, dataChannelDict);\n      dataChannelIds.add(id);\n      return new _RTCDataChannel.default(this._peerConnectionId, label, dataChannelDict);\n    }\n  }]);\n  return RTCPeerConnection;\n}((0, _eventTargetShim.default)(PEER_CONNECTION_EVENTS));\n\nexports.default = RTCPeerConnection;","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/RTCPeerConnection.js"],"names":["WebRTCModule","NativeModules","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","configuration","signalingState","iceGatheringState","connectionState","iceConnectionState","_localStreams","_remoteStreams","_dataChannelIds","Set","_peerConnectionId","peerConnectionInit","_registerEvents","stream","index","indexOf","peerConnectionAddStream","_reactTag","push","splice","peerConnectionRemoveStream","options","Promise","resolve","reject","peerConnectionCreateOffer","RTCUtil","normalizeOfferAnswerOptions","successful","data","RTCSessionDescription","peerConnectionCreateAnswer","peerConnectionSetConfiguration","sessionDescription","peerConnectionSetLocalDescription","toJSON","localDescription","peerConnectionSetRemoteDescription","remoteDescription","candidate","peerConnectionAddICECandidate","Error","track","peerConnectionGetStats","id","success","stats","JSON","parse","e","slice","peerConnectionClose","streamReactTag","trackId","find","_tracks","_subscriptions","forEach","remove","EventEmitter","addListener","ev","dispatchEvent","RTCEvent","_unregisterEvents","MediaStream","MediaStreamEvent","s","streamId","peerConnectionId","_getTrack","muted","eventName","MediaStreamTrackEvent","RTCIceCandidate","event","RTCIceCandidateEvent","evDataChannel","dataChannel","channel","RTCDataChannel","label","add","RTCDataChannelEvent","dataChannelDict","dataChannelIds","TypeError","has","ResourceInUse","createDataChannel"],"mappings":"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","sourcesContent":["'use strict';\n\nimport EventTarget from 'event-target-shim';\nimport { NativeModules, NativeEventEmitter } from 'react-native';\n\nimport MediaStream from './MediaStream';\nimport MediaStreamEvent from './MediaStreamEvent';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCSessionDescription from './RTCSessionDescription';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCEvent from './RTCEvent';\nimport * as RTCUtil from './RTCUtil';\nimport EventEmitter from './EventEmitter';\n\nconst {WebRTCModule} = NativeModules;\n\ntype RTCSignalingState =\n  'stable' |\n  'have-local-offer' |\n  'have-remote-offer' |\n  'have-local-pranswer' |\n  'have-remote-pranswer' |\n  'closed';\n\ntype RTCIceGatheringState =\n  'new' |\n  'gathering' |\n  'complete';\n\ntype RTCPeerConnectionState =\n  'new' |\n  'connecting' |\n  'connected' |\n  'disconnected' |\n  'failed' |\n  'closed';\n\ntype RTCIceConnectionState =\n  'new' |\n  'checking' |\n  'connected' |\n  'completed' |\n  'failed' |\n  'disconnected' |\n  'closed';\n\nconst PEER_CONNECTION_EVENTS = [\n  'connectionstatechange',\n  'icecandidate',\n  'icecandidateerror',\n  'iceconnectionstatechange',\n  'icegatheringstatechange',\n  'negotiationneeded',\n  'signalingstatechange',\n  // Peer-to-peer Data API:\n  'datachannel',\n  // old:\n  'addstream',\n  'removestream',\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends EventTarget(PEER_CONNECTION_EVENTS) {\n  localDescription: RTCSessionDescription;\n  remoteDescription: RTCSessionDescription;\n\n  signalingState: RTCSignalingState = 'stable';\n  iceGatheringState: RTCIceGatheringState = 'new';\n  connectionState: RTCPeerConnectionState = 'new';\n  iceConnectionState: RTCIceConnectionState = 'new';\n\n  onconnectionstatechange: ?Function;\n  onicecandidate: ?Function;\n  onicecandidateerror: ?Function;\n  oniceconnectionstatechange: ?Function;\n  onicegatheringstatechange: ?Function;\n  onnegotiationneeded: ?Function;\n  onsignalingstatechange: ?Function;\n\n  onaddstream: ?Function;\n  onremovestream: ?Function;\n\n  _peerConnectionId: number;\n  _localStreams: Array<MediaStream> = [];\n  _remoteStreams: Array<MediaStream> = [];\n  _subscriptions: Array<any>;\n\n  /**\n   * The RTCDataChannel.id allocator of this RTCPeerConnection.\n   */\n  _dataChannelIds: Set = new Set();\n\n  constructor(configuration) {\n    super();\n    this._peerConnectionId = nextPeerConnectionId++;\n    WebRTCModule.peerConnectionInit(configuration, this._peerConnectionId);\n    this._registerEvents();\n  }\n\n  addStream(stream: MediaStream) {\n      const index = this._localStreams.indexOf(stream);\n      if (index !== -1) {\n          return;\n      }\n      WebRTCModule.peerConnectionAddStream(stream._reactTag, this._peerConnectionId);\n      this._localStreams.push(stream);\n  }\n\n  removeStream(stream: MediaStream) {\n      const index = this._localStreams.indexOf(stream);\n      if (index === -1) {\n          return;\n      }\n      this._localStreams.splice(index, 1);\n      WebRTCModule.peerConnectionRemoveStream(stream._reactTag, this._peerConnectionId);\n  }\n\n  createOffer(options) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionCreateOffer(\n        this._peerConnectionId,\n        RTCUtil.normalizeOfferAnswerOptions(options),\n        (successful, data) => {\n          if (successful) {\n            resolve(new RTCSessionDescription(data));\n          } else {\n            reject(data); // TODO: convert to NavigatorUserMediaError\n          }\n        });\n    });\n  }\n\n  createAnswer(options = {}) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionCreateAnswer(\n        this._peerConnectionId,\n        RTCUtil.normalizeOfferAnswerOptions(options),\n        (successful, data) => {\n          if (successful) {\n            resolve(new RTCSessionDescription(data));\n          } else {\n            reject(data);\n          }\n        });\n    });\n  }\n\n  setConfiguration(configuration) {\n    WebRTCModule.peerConnectionSetConfiguration(configuration, this._peerConnectionId);\n  }\n\n  setLocalDescription(sessionDescription: RTCSessionDescription) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionSetLocalDescription(\n        sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription,\n        this._peerConnectionId,\n        (successful, data) => {\n          if (successful) {\n            this.localDescription = sessionDescription;\n            resolve();\n          } else {\n            reject(data);\n          }\n      });\n    });\n  }\n\n  setRemoteDescription(sessionDescription: RTCSessionDescription) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionSetRemoteDescription(\n        sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription,\n        this._peerConnectionId,\n        (successful, data) => {\n          if (successful) {\n            this.remoteDescription = sessionDescription;\n            resolve();\n          } else {\n            reject(data);\n          }\n      });\n    });\n  }\n\n  addIceCandidate(candidate) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionAddICECandidate(\n        candidate.toJSON ? candidate.toJSON() : candidate,\n        this._peerConnectionId,\n        (successful) => {\n          if (successful) {\n            resolve()\n          } else {\n            // XXX: This should be OperationError\n            reject(new Error('Failed to add ICE candidate'));\n          }\n      });\n    });\n  }\n\n  getStats(track) {\n    // NOTE: This returns a Promise but the format of the results is still\n    // the \"legacy\" one. The native side (in Oobj-C) doesn't yet support the\n    // new format: https://bugs.chromium.org/p/webrtc/issues/detail?id=6872\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionGetStats(\n        (track && track.id) || '',\n        this._peerConnectionId,\n        (success, data) => {\n          if (success) {\n            // On both Android and iOS it is faster to construct a single\n            // JSON string representing the array of StatsReports and have it\n            // pass through the React Native bridge rather than the array of\n            // StatsReports. While the implementations do try to be faster in\n            // general, the stress is on being faster to pass through the React\n            // Native bridge which is a bottleneck that tends to be visible in\n            // the UI when there is congestion involving UI-related passing.\n            try {\n              const stats = JSON.parse(data);\n              resolve(stats);\n            } catch (e) {\n              reject(e);\n            }\n          } else {\n            reject(new Error(data));\n          }\n        });\n    });\n  }\n\n  getLocalStreams() {\n    return this._localStreams.slice();\n  }\n\n  getRemoteStreams() {\n    return this._remoteStreams.slice();\n  }\n\n  close() {\n    WebRTCModule.peerConnectionClose(this._peerConnectionId);\n  }\n\n  _getTrack(streamReactTag, trackId): MediaStreamTrack {\n    const stream\n      = this._remoteStreams.find(\n          stream => stream._reactTag === streamReactTag);\n\n    return stream && stream._tracks.find(track => track.id === trackId);\n  }\n\n  _unregisterEvents(): void {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _registerEvents(): void {\n    this._subscriptions = [\n      EventEmitter.addListener('peerConnectionOnRenegotiationNeeded', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.dispatchEvent(new RTCEvent('negotiationneeded'));\n      }),\n      EventEmitter.addListener('peerConnectionIceConnectionChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.iceConnectionState = ev.iceConnectionState;\n        this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n        if (ev.iceConnectionState === 'closed') {\n          // This PeerConnection is done, clean up event handlers.\n          this._unregisterEvents();\n        }\n      }),\n      EventEmitter.addListener('peerConnectionStateChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.connectionState = ev.connectionState;\n        this.dispatchEvent(new RTCEvent('connectionstatechange'));\n        if (ev.connectionState === 'closed') {\n          // This PeerConnection is done, clean up event handlers.\n          this._unregisterEvents();\n        }\n      }),\n      EventEmitter.addListener('peerConnectionSignalingStateChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.signalingState = ev.signalingState;\n        this.dispatchEvent(new RTCEvent('signalingstatechange'));\n      }),\n      EventEmitter.addListener('peerConnectionAddedStream', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const stream = new MediaStream(ev);\n        this._remoteStreams.push(stream);\n        this.dispatchEvent(new MediaStreamEvent('addstream', {stream}));\n      }),\n      EventEmitter.addListener('peerConnectionRemovedStream', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const stream = this._remoteStreams.find(s => s._reactTag === ev.streamId);\n        if (stream) {\n          const index = this._remoteStreams.indexOf(stream);\n          if (index !== -1) {\n            this._remoteStreams.splice(index, 1);\n          }\n        }\n        this.dispatchEvent(new MediaStreamEvent('removestream', {stream}));\n      }),\n      EventEmitter.addListener('mediaStreamTrackMuteChanged', ev => {\n        if (ev.peerConnectionId !== this._peerConnectionId) {\n          return;\n        }\n        const track = this._getTrack(ev.streamReactTag, ev.trackId);\n        if (track) {\n          track.muted = ev.muted;\n          const eventName = ev.muted ? 'mute' : 'unmute';\n          track.dispatchEvent(new MediaStreamTrackEvent(eventName, {track}));\n        }\n      }),\n      EventEmitter.addListener('peerConnectionGotICECandidate', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const candidate = new RTCIceCandidate(ev.candidate);\n        const event = new RTCIceCandidateEvent('icecandidate', {candidate});\n        this.dispatchEvent(event);\n      }),\n      EventEmitter.addListener('peerConnectionIceGatheringChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.iceGatheringState = ev.iceGatheringState;\n\n        if (this.iceGatheringState === 'complete') {\n          this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', null));\n        }\n\n        this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n      }),\n      EventEmitter.addListener('peerConnectionDidOpenDataChannel', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const evDataChannel = ev.dataChannel;\n        const id = evDataChannel.id;\n        // XXX RTP data channels are not defined by the WebRTC standard, have\n        // been deprecated in Chromium, and Google have decided (in 2015) to no\n        // longer support them (in the face of multiple reported issues of\n        // breakages).\n        if (typeof id !== 'number' || id === -1) {\n          return;\n        }\n        const channel\n          = new RTCDataChannel(\n              this._peerConnectionId,\n              evDataChannel.label,\n              evDataChannel);\n        // XXX webrtc::PeerConnection checked that id was not in use in its own\n        // SID allocator before it invoked us. Additionally, its own SID\n        // allocator is the authority on ResourceInUse. Consequently, it is\n        // (pretty) safe to update our RTCDataChannel.id allocator without\n        // checking for ResourceInUse.\n        this._dataChannelIds.add(id);\n        this.dispatchEvent(new RTCDataChannelEvent('datachannel', {channel}));\n      })\n    ];\n  }\n\n  /**\n   * Creates a new RTCDataChannel object with the given label. The\n   * RTCDataChannelInit dictionary can be used to configure properties of the\n   * underlying channel such as data reliability.\n   *\n   * @param {string} label - the value with which the label attribute of the new\n   * instance is to be initialized\n   * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n   * values with which to initialize corresponding attributes of the new\n   * instance such as id\n   */\n  createDataChannel(label: string, dataChannelDict?: ?RTCDataChannelInit) {\n    let id;\n    const dataChannelIds = this._dataChannelIds;\n    if (dataChannelDict && 'id' in dataChannelDict) {\n      id = dataChannelDict.id;\n      if (typeof id !== 'number') {\n        throw new TypeError('DataChannel id must be a number: ' + id);\n      }\n      if (dataChannelIds.has(id)) {\n        throw new ResourceInUse('DataChannel id already in use: ' + id);\n      }\n    } else {\n      // Allocate a new id.\n      // TODO Remembering the last used/allocated id and then incrementing it to\n      // generate the next id to use will surely be faster. However, I want to\n      // reuse ids (in the future) as the RTCDataChannel.id space is limited to\n      // unsigned short by the standard:\n      // https://www.w3.org/TR/webrtc/#dom-datachannel-id. Additionally, 65535\n      // is reserved due to SCTP INIT and INIT-ACK chunks only allowing a\n      // maximum of 65535 streams to be negotiated (as defined by the WebRTC\n      // Data Channel Establishment Protocol).\n      for (id = 1; id < 65535 && dataChannelIds.has(id); ++id);\n      // TODO Throw an error if no unused id is available.\n      dataChannelDict = Object.assign({id}, dataChannelDict);\n    }\n    WebRTCModule.createDataChannel(\n        this._peerConnectionId,\n        label,\n        dataChannelDict);\n    dataChannelIds.add(id);\n    return new RTCDataChannel(this._peerConnectionId, label, dataChannelDict);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}