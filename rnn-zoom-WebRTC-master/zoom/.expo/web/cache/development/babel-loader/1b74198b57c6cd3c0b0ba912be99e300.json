{"ast":null,"code":"\"use strict\";\n\nvar Commons = require(\"./commons\");\n\nvar LISTENERS = Commons.LISTENERS;\nvar ATTRIBUTE = Commons.ATTRIBUTE;\nvar newNode = Commons.newNode;\n\nfunction getAttributeListener(eventTarget, type) {\n  var node = eventTarget[LISTENERS][type];\n\n  while (node != null) {\n    if (node.kind === ATTRIBUTE) {\n      return node.listener;\n    }\n\n    node = node.next;\n  }\n\n  return null;\n}\n\nfunction setAttributeListener(eventTarget, type, listener) {\n  if (typeof listener !== \"function\" && typeof listener !== \"object\") {\n    listener = null;\n  }\n\n  var prev = null;\n  var node = eventTarget[LISTENERS][type];\n\n  while (node != null) {\n    if (node.kind === ATTRIBUTE) {\n      if (prev == null) {\n        eventTarget[LISTENERS][type] = node.next;\n      } else {\n        prev.next = node.next;\n      }\n    } else {\n      prev = node;\n    }\n\n    node = node.next;\n  }\n\n  if (listener != null) {\n    if (prev == null) {\n      eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);\n    } else {\n      prev.next = newNode(listener, ATTRIBUTE);\n    }\n  }\n}\n\nexports.defineCustomEventTarget = function (EventTargetBase, types) {\n  function EventTarget() {\n    EventTargetBase.call(this);\n  }\n\n  var descripter = {\n    constructor: {\n      value: EventTarget,\n      configurable: true,\n      writable: true\n    }\n  };\n  types.forEach(function (type) {\n    descripter[\"on\" + type] = {\n      get: function get() {\n        return getAttributeListener(this, type);\n      },\n      set: function set(listener) {\n        setAttributeListener(this, type, listener);\n      },\n      configurable: true,\n      enumerable: true\n    };\n  });\n  EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);\n  return EventTarget;\n};","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/node_modules/event-target-shim/lib/custom-event-target.js"],"names":["Commons","require","LISTENERS","ATTRIBUTE","newNode","getAttributeListener","eventTarget","type","node","kind","listener","next","setAttributeListener","prev","exports","defineCustomEventTarget","EventTargetBase","types","EventTarget","call","descripter","constructor","value","configurable","writable","forEach","get","set","enumerable","prototype","Object","create"],"mappings":"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","sourcesContent":["/**\n * @author Toru Nagashima\n * @copyright 2015 Toru Nagashima. All rights reserved.\n * See LICENSE file in root directory for full license.\n */\n\n\"use strict\";\n\n//-----------------------------------------------------------------------------\n// Requirements\n//-----------------------------------------------------------------------------\n\nvar Commons = require(\"./commons\");\nvar LISTENERS = Commons.LISTENERS;\nvar ATTRIBUTE = Commons.ATTRIBUTE;\nvar newNode = Commons.newNode;\n\n//-----------------------------------------------------------------------------\n// Helpers\n//-----------------------------------------------------------------------------\n\n/**\n * Gets a specified attribute listener from a given EventTarget object.\n *\n * @param {EventTarget} eventTarget - An EventTarget object to get.\n * @param {string} type - An event type to get.\n * @returns {function|null} The found attribute listener.\n */\nfunction getAttributeListener(eventTarget, type) {\n    var node = eventTarget[LISTENERS][type];\n    while (node != null) {\n        if (node.kind === ATTRIBUTE) {\n            return node.listener;\n        }\n        node = node.next;\n    }\n    return null;\n}\n\n/**\n * Sets a specified attribute listener to a given EventTarget object.\n *\n * @param {EventTarget} eventTarget - An EventTarget object to set.\n * @param {string} type - An event type to set.\n * @param {function|null} listener - A listener to be set.\n * @returns {void}\n */\nfunction setAttributeListener(eventTarget, type, listener) {\n    if (typeof listener !== \"function\" && typeof listener !== \"object\") {\n        listener = null; // eslint-disable-line no-param-reassign\n    }\n\n    var prev = null;\n    var node = eventTarget[LISTENERS][type];\n    while (node != null) {\n        if (node.kind === ATTRIBUTE) {\n            // Remove old value.\n            if (prev == null) {\n                eventTarget[LISTENERS][type] = node.next;\n            }\n            else {\n                prev.next = node.next;\n            }\n        }\n        else {\n            prev = node;\n        }\n\n        node = node.next;\n    }\n\n    // Add new value.\n    if (listener != null) {\n        if (prev == null) {\n            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);\n        }\n        else {\n            prev.next = newNode(listener, ATTRIBUTE);\n        }\n    }\n}\n\n//-----------------------------------------------------------------------------\n// Public Interface\n//-----------------------------------------------------------------------------\n\n/**\n * Defines an `EventTarget` implementation which has `onfoobar` attributes.\n *\n * @param {EventTarget} EventTargetBase - A base implementation of EventTarget.\n * @param {string[]} types - A list of event types which are defined as attribute listeners.\n * @returns {EventTarget} The defined `EventTarget` implementation which has attribute listeners.\n */\nexports.defineCustomEventTarget = function(EventTargetBase, types) {\n    function EventTarget() {\n        EventTargetBase.call(this);\n    }\n\n    var descripter = {\n        constructor: {\n            value: EventTarget,\n            configurable: true,\n            writable: true\n        }\n    };\n\n    types.forEach(function(type) {\n        descripter[\"on\" + type] = {\n            get: function() { return getAttributeListener(this, type); },\n            set: function(listener) { setAttributeListener(this, type, listener); },\n            configurable: true,\n            enumerable: true\n        };\n    });\n\n    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);\n\n    return EventTarget;\n};\n"]},"metadata":{},"sourceType":"script"}