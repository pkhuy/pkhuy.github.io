{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _reactNative = require(\"react-native\");\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar WebRTCModule = _reactNative.NativeModules.WebRTCModule;\nvar RTCView = {\n  name: 'RTCVideoView',\n  propTypes: {\n    mirror: _propTypes.default.bool,\n    objectFit: _propTypes.default.oneOf(['contain', 'cover']),\n    streamURL: _propTypes.default.string,\n    zOrder: _propTypes.default.number\n  }\n};\nvar View = (0, _reactNative.requireNativeComponent)('RTCVideoView', RTCView, {\n  nativeOnly: {\n    testID: true,\n    accessibilityComponentType: true,\n    renderToHardwareTextureAndroid: true,\n    accessibilityLabel: true,\n    accessibilityLiveRegion: true,\n    importantForAccessibility: true,\n    onLayout: true,\n    nativeID: true\n  }\n});\nvar _default = View;\nexports.default = _default;","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/RTCView.js"],"names":["WebRTCModule","NativeModules","RTCView","name","propTypes","mirror","PropTypes","bool","objectFit","oneOf","streamURL","string","zOrder","number","View","nativeOnly","testID","accessibilityComponentType","renderToHardwareTextureAndroid","accessibilityLabel","accessibilityLiveRegion","importantForAccessibility","onLayout","nativeID"],"mappings":"AAAA;;;;;;;;;AAEA;;AAIA;;AAEA,IAAOA,YAAP,GAAuBC,0BAAvB,CAAOD,YAAP;AAEA,IAAME,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,cADQ;AAEdC,EAAAA,SAAS,EAAE;AAOTC,IAAAA,MAAM,EAAEC,mBAAUC,IAPT;AAeTC,IAAAA,SAAS,EAAEF,mBAAUG,KAAV,CAAgB,CAAC,SAAD,EAAY,OAAZ,CAAhB,CAfF;AAiBTC,IAAAA,SAAS,EAAEJ,mBAAUK,MAjBZ;AA0CTC,IAAAA,MAAM,EAAEN,mBAAUO;AA1CT;AAFG,CAAhB;AAgDA,IAAMC,IAAI,GAAG,yCAAuB,cAAvB,EAAuCZ,OAAvC,EAAgD;AAACa,EAAAA,UAAU,EAAE;AACxEC,IAAAA,MAAM,EAAE,IADgE;AAExEC,IAAAA,0BAA0B,EAAE,IAF4C;AAGxEC,IAAAA,8BAA8B,EAAE,IAHwC;AAIxEC,IAAAA,kBAAkB,EAAE,IAJoD;AAKxEC,IAAAA,uBAAuB,EAAE,IAL+C;AAMxEC,IAAAA,yBAAyB,EAAE,IAN6C;AAOxEC,IAAAA,QAAQ,EAAE,IAP8D;AAQxEC,IAAAA,QAAQ,EAAE;AAR8D;AAAb,CAAhD,CAAb;eAWeT,I","sourcesContent":["'use strict';\n\nimport {\n  NativeModules,\n  requireNativeComponent,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nconst {WebRTCModule} = NativeModules;\n\nconst RTCView = {\n  name: 'RTCVideoView',\n  propTypes: {\n\n    /**\n     * Indicates whether the video specified by {@link #streamURL} should be\n     * mirrored during rendering. Commonly, applications choose to mirror the\n     * user-facing camera.\n     */\n    mirror: PropTypes.bool,\n\n    /**\n     * In the fashion of\n     * https://www.w3.org/TR/html5/embedded-content-0.html#dom-video-videowidth\n     * and https://www.w3.org/TR/html5/rendering.html#video-object-fit,\n     * resembles the CSS style object-fit.\n     */\n    objectFit: PropTypes.oneOf(['contain', 'cover']),\n\n    streamURL: PropTypes.string,\n\n    /**\n     * Similarly to the CSS property z-index, specifies the z-order of this\n     * RTCView in the stacking space of all RTCViews. When RTCViews overlap,\n     * zOrder determines which one covers the other. An RTCView with a larger\n     * zOrder generally covers an RTCView with a lower one.\n     *\n     * Non-overlapping RTCViews may safely share a z-order (because one does not\n     * have to cover the other).\n     *\n     * The support for zOrder is platform-dependent and/or\n     * implementation-specific. Thus, specifying a value for zOrder is to be\n     * thought of as giving a hint rather than as imposing a requirement. For\n     * example, video renderers such as RTCView are commonly implemented using\n     * OpenGL and OpenGL views may have different numbers of layers in their\n     * stacking space. Android has three: a layer bellow the window (aka\n     * default), a layer bellow the window again but above the previous layer\n     * (aka media overlay), and above the window. Consequently, it is advisable\n     * to limit the number of utilized layers in the stacking space to the\n     * minimum sufficient for the desired display. For example, a video call\n     * application usually needs a maximum of two zOrder values: 0 for the\n     * remote video(s) which appear in the background, and 1 for the local\n     * video(s) which appear above the remote video(s).\n     */\n    zOrder: PropTypes.number\n  },\n};\n\nconst View = requireNativeComponent('RTCVideoView', RTCView, {nativeOnly: {\n  testID: true,\n  accessibilityComponentType: true,\n  renderToHardwareTextureAndroid: true,\n  accessibilityLabel: true,\n  accessibilityLiveRegion: true,\n  importantForAccessibility: true,\n  onLayout: true,\n  nativeID: true,\n}});\n\nexport default View;\n"]},"metadata":{},"sourceType":"script"}