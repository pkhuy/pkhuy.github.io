{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.joinRoom = exports.socket = exports.API_URI = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _socket = _interopRequireDefault(require(\"socket.io-client\"));\n\nvar _reactNativePeerjs = _interopRequireDefault(require(\"react-native-peerjs\"));\n\nvar _types = require(\"./types\");\n\nvar _pairs = require(\"rxjs/internal/observable/pairs\");\n\nvar API_URI = \"http://192.168.47.194:5000\";\nexports.API_URI = API_URI;\nvar socket = (0, _socket.default)(\"\" + API_URI, {\n  forceNew: true\n});\nexports.socket = socket;\nsocket.on('connection', function () {\n  return console.log('Connection');\n});\n\nvar joinRoom = function joinRoom(stream) {\n  return function _callee(dispatch) {\n    var roomID;\n    return _regenerator.default.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            roomID = 'asdlfjasldkjfksajdlkfjafasfasfa';\n            dispatch({\n              type: _types.MY_STREAM,\n              payload: stream\n            });\n            peerServer.on('open', function (userId) {\n              socket.emit('join-room', {\n                userId: userId,\n                roomID: roomID\n              });\n            });\n            socket.on('user-connected', function (userId) {\n              connectToNewUser(userId, stream, dispatch);\n            });\n            peerServer.on('call', function (call) {\n              call.answer(stream);\n              call.on('stream', function (stream) {\n                dispatch({\n                  type: _types.ADD_STREAM,\n                  payload: stream\n                });\n              });\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\n\nexports.joinRoom = joinRoom;\n\nfunction connectToNewUser(userId, stream, dispatch) {\n  var call = peerServer.call(userId, stream);\n  call.on('stream', function (remoteVideoStream) {\n    if (remoteVideoStream) {\n      dispatch({\n        type: _types.ADD_REMOTE_STREAM,\n        payload: remoteVideoStream\n      });\n    }\n  });\n}","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/src/store/actions/videoActions.js"],"names":["API_URI","socket","forceNew","on","console","log","joinRoom","stream","dispatch","roomID","type","MY_STREAM","payload","peerServer","userId","emit","connectToNewUser","call","answer","ADD_STREAM","remoteVideoStream","ADD_REMOTE_STREAM"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;;AAKA;;AAIO,IAAMA,OAAO,+BAAb;;AAGA,IAAMC,MAAM,GAAG,0BAAMD,OAAN,EAAiB;AACnCE,EAAAA,QAAQ,EAAE;AADyB,CAAjB,CAAf;;AAIPD,MAAM,CAACE,EAAP,CAAU,YAAV,EAAwB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;AAAA,CAAxB;;AAYO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,MAAD;AAAA,SAAY,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,YAAAA,MAD0B,GACjB,iCADiB;AAEhCD,YAAAA,QAAQ,CAAC;AAAEE,cAAAA,IAAI,EAAEC,gBAAR;AAAmBC,cAAAA,OAAO,EAAEL;AAA5B,aAAD,CAAR;AAGAM,YAAAA,UAAU,CAACV,EAAX,CAAc,MAAd,EAAsB,UAACW,MAAD,EAAY;AAC9Bb,cAAAA,MAAM,CAACc,IAAP,CAAY,WAAZ,EAAyB;AAAED,gBAAAA,MAAM,EAANA,MAAF;AAAUL,gBAAAA,MAAM,EAANA;AAAV,eAAzB;AACH,aAFD;AAIAR,YAAAA,MAAM,CAACE,EAAP,CAAU,gBAAV,EAA4B,UAACW,MAAD,EAAY;AACpCE,cAAAA,gBAAgB,CAACF,MAAD,EAASP,MAAT,EAAiBC,QAAjB,CAAhB;AACH,aAFD;AAKAK,YAAAA,UAAU,CAACV,EAAX,CAAc,MAAd,EAAsB,UAACc,IAAD,EAAU;AAC5BA,cAAAA,IAAI,CAACC,MAAL,CAAYX,MAAZ;AAGAU,cAAAA,IAAI,CAACd,EAAL,CAAQ,QAAR,EAAkB,UAACI,MAAD,EAAY;AAC1BC,gBAAAA,QAAQ,CAAC;AAAEE,kBAAAA,IAAI,EAAES,iBAAR;AAAoBP,kBAAAA,OAAO,EAAEL;AAA7B,iBAAD,CAAR;AACH,eAFD;AAGH,aAPD;;AAdgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;AAAA,CAAjB;;;;AAwBP,SAASS,gBAAT,CAA0BF,MAA1B,EAAkCP,MAAlC,EAA0CC,QAA1C,EAAoD;AAChD,MAAMS,IAAI,GAAGJ,UAAU,CAACI,IAAX,CAAgBH,MAAhB,EAAwBP,MAAxB,CAAb;AAEAU,EAAAA,IAAI,CAACd,EAAL,CAAQ,QAAR,EAAkB,UAACiB,iBAAD,EAAuB;AACrC,QAAIA,iBAAJ,EAAuB;AACnBZ,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAEW,wBAAR;AAA2BT,QAAAA,OAAO,EAAEQ;AAApC,OAAD,CAAR;AACH;AACJ,GAJD;AAKH","sourcesContent":["import IO from 'socket.io-client'\r\nimport Peer  from 'react-native-peerjs'\r\n\r\nimport {\r\n    ADD_STREAM,\r\n    MY_STREAM,\r\n    ADD_REMOTE_STREAM\r\n} from \"./types\";\r\nimport { dispatch } from 'rxjs/internal/observable/pairs';\r\n\r\n// API URI\r\n\r\nexport const API_URI = `http://192.168.47.194:5000`\r\n\r\n//SCOKET config\r\nexport const socket = IO(`${API_URI}`, {\r\n    forceNew: true,\r\n});\r\n\r\nsocket.on('connection', () => console.log('Connection'));\r\n\r\n//PEER config\r\n// const peerServer = new Peer(undefined, {\r\n//     host: '192.168.47.194',\r\n//     seccure: false,\r\n//     port: 5000,\r\n//     path: '/mypeer',\r\n// });\r\n\r\n// peerServer.on('error', console.log);\r\n\r\nexport const joinRoom = (stream) => async (dispatch) => {\r\n    const roomID = 'asdlfjasldkjfksajdlkfjafasfasfa'\r\n    dispatch({ type: MY_STREAM, payload: stream });\r\n\r\n    //Open a connection \r\n    peerServer.on('open', (userId) => {\r\n        socket.emit('join-room', { userId, roomID });\r\n    });\r\n\r\n    socket.on('user-connected', (userId) => {\r\n        connectToNewUser(userId, stream, dispatch)\r\n    });\r\n\r\n    //Receive a call\r\n    peerServer.on('call', (call) => {\r\n        call.answer(stream)\r\n        \r\n        //Stream back the call\r\n        call.on('stream', (stream) => {\r\n            dispatch({ type: ADD_STREAM, payload: stream });\r\n        });\r\n    });\r\n};\r\n\r\nfunction connectToNewUser(userId, stream, dispatch) {\r\n    const call = peerServer.call(userId, stream);\r\n\r\n    call.on('stream', (remoteVideoStream) => {\r\n        if (remoteVideoStream) {\r\n            dispatch({ type: ADD_REMOTE_STREAM, payload: remoteVideoStream });\r\n        }\r\n    })\r\n}"]},"metadata":{},"sourceType":"script"}