{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getDisplayMedia;\n\nvar _reactNative = require(\"react-native\");\n\nvar _MediaStream = _interopRequireDefault(require(\"./MediaStream\"));\n\nvar _MediaStreamError = _interopRequireDefault(require(\"./MediaStreamError\"));\n\nvar WebRTCModule = _reactNative.NativeModules.WebRTCModule;\n\nfunction getDisplayMedia(constraints) {\n  if (_reactNative.Platform.OS !== 'android') {\n    return Promise.reject(new Error('Unsupported platform'));\n  }\n\n  if (!constraints || !constraints.video) {\n    return Promise.reject(new TypeError());\n  }\n\n  return new Promise(function (resolve, reject) {\n    WebRTCModule.getDisplayMedia().then(function (data) {\n      var streamId = data.streamId,\n          track = data.track;\n      var info = {\n        streamId: streamId,\n        streamReactTag: streamId,\n        tracks: [track]\n      };\n      var stream = new _MediaStream.default(info);\n      resolve(stream);\n    }, function (error) {\n      reject(new _MediaStreamError.default(error));\n    });\n  });\n}","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/getDisplayMedia.js"],"names":["WebRTCModule","NativeModules","getDisplayMedia","constraints","Platform","OS","Promise","reject","Error","video","TypeError","resolve","then","data","streamId","track","info","streamReactTag","tracks","stream","MediaStream","error","MediaStreamError"],"mappings":"AAAA;;;;;;;;;AAEA;;AAEA;;AACA;;AAEA,IAAQA,YAAR,GAAyBC,0BAAzB,CAAQD,YAAR;;AAEe,SAASE,eAAT,CAAyBC,WAAzB,EAAsC;AACjD,MAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC3B,WAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,sBAAV,CAAf,CAAP;AACH;;AAED,MAAI,CAACL,WAAD,IAAgB,CAACA,WAAW,CAACM,KAAjC,EAAwC;AACpC,WAAOH,OAAO,CAACC,MAAR,CAAe,IAAIG,SAAJ,EAAf,CAAP;AACH;;AAED,SAAO,IAAIJ,OAAJ,CAAY,UAACK,OAAD,EAAUJ,MAAV,EAAqB;AACpCP,IAAAA,YAAY,CAACE,eAAb,GACKU,IADL,CACU,UAAAC,IAAI,EAAI;AACV,UAAQC,QAAR,GAA4BD,IAA5B,CAAQC,QAAR;AAAA,UAAkBC,KAAlB,GAA4BF,IAA5B,CAAkBE,KAAlB;AAEA,UAAMC,IAAI,GAAG;AACTF,QAAAA,QAAQ,EAAEA,QADD;AAETG,QAAAA,cAAc,EAAEH,QAFP;AAGTI,QAAAA,MAAM,EAAE,CAACH,KAAD;AAHC,OAAb;AAMA,UAAMI,MAAM,GAAG,IAAIC,oBAAJ,CAAgBJ,IAAhB,CAAf;AAEAL,MAAAA,OAAO,CAACQ,MAAD,CAAP;AACH,KAbL,EAaO,UAAAE,KAAK,EAAI;AACRd,MAAAA,MAAM,CAAC,IAAIe,yBAAJ,CAAqBD,KAArB,CAAD,CAAN;AACH,KAfL;AAgBH,GAjBM,CAAP;AAkBH","sourcesContent":["'use strict';\n\nimport { Platform, NativeModules } from 'react-native';\n\nimport MediaStream from './MediaStream';\nimport MediaStreamError from './MediaStreamError';\n\nconst { WebRTCModule } = NativeModules;\n\nexport default function getDisplayMedia(constraints) {\n    if (Platform.OS !== 'android') {\n        return Promise.reject(new Error('Unsupported platform'));\n    }\n\n    if (!constraints || !constraints.video) {\n        return Promise.reject(new TypeError());\n    }\n\n    return new Promise((resolve, reject) => {\n        WebRTCModule.getDisplayMedia()\n            .then(data => {\n                const { streamId, track } = data;\n\n                const info = {\n                    streamId: streamId,\n                    streamReactTag: streamId,\n                    tracks: [track]\n                };\n\n                const stream = new MediaStream(info);\n\n                resolve(stream);\n            }, error => {\n                reject(new MediaStreamError(error));\n            });\n    });\n}\n"]},"metadata":{},"sourceType":"script"}