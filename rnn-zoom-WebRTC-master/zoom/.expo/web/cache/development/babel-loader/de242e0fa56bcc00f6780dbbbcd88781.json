{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar WebRTCModule = _reactNative.NativeModules.WebRTCModule;\n\nvar Permissions = function () {\n  function Permissions() {\n    (0, _classCallCheck2.default)(this, Permissions);\n    this.RESULT = {\n      DENIED: 'denied',\n      GRANTED: 'granted',\n      PROMPT: 'prompt'\n    };\n    this.VALID_PERMISSIONS = ['camera', 'microphone'];\n    this._lastReq = Promise.resolve();\n  }\n\n  (0, _createClass2.default)(Permissions, [{\n    key: \"_requestPermissionAndroid\",\n    value: function _requestPermissionAndroid(perm) {\n      return new Promise(function (resolve, reject) {\n        _reactNative.PermissionsAndroid.request(perm).then(function (granted) {\n          return resolve(granted === true || granted === _reactNative.PermissionsAndroid.RESULTS.GRANTED);\n        }, function () {\n          return resolve(false);\n        });\n      });\n    }\n  }, {\n    key: \"_validatePermissionDescriptior\",\n    value: function _validatePermissionDescriptior(permissionDesc) {\n      if (typeof permissionDesc !== \"object\") {\n        throw new TypeError(\"Argument 1 of Permissions.query is not an object.\");\n      }\n\n      if (typeof permissionDesc.name === \"undefined\") {\n        throw new TypeError(\"Missing required 'name' member of PermissionDescriptor.\");\n      }\n\n      if (this.VALID_PERMISSIONS.indexOf(permissionDesc.name) === -1) {\n        throw new TypeError(\"'name' member of PermissionDescriptor is not a valid value for enumeration PermissionName.\");\n      }\n    }\n  }, {\n    key: \"query\",\n    value: function query(permissionDesc) {\n      var _this = this;\n\n      try {\n        this._validatePermissionDescriptior(permissionDesc);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      if (_reactNative.Platform.OS === 'android') {\n        var perm = permissionDesc.name === 'camera' ? _reactNative.PermissionsAndroid.PERMISSIONS.CAMERA : _reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n        return new Promise(function (resolve, reject) {\n          _reactNative.PermissionsAndroid.check(perm).then(function (granted) {\n            return resolve(granted ? _this.RESULT.GRANTED : _this.RESULT.PROMPT);\n          }, function () {\n            return resolve(_this.RESULT.PROMPT);\n          });\n        });\n      } else if (_reactNative.Platform.OS === 'ios') {\n        return WebRTCModule.checkPermission(permissionDesc.name);\n      } else {\n        return Promise.reject(new TypeError(\"Unsupported platform.\"));\n      }\n    }\n  }, {\n    key: \"request\",\n    value: function request(permissionDesc) {\n      var _this2 = this;\n\n      try {\n        this._validatePermissionDescriptior(permissionDesc);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n\n      if (_reactNative.Platform.OS === 'android') {\n        var perm = permissionDesc.name === 'camera' ? _reactNative.PermissionsAndroid.PERMISSIONS.CAMERA : _reactNative.PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n\n        var requestPermission = function requestPermission() {\n          return _this2._requestPermissionAndroid(perm);\n        };\n\n        this._lastReq = this._lastReq.then(requestPermission, requestPermission);\n        return this._lastReq;\n      } else if (_reactNative.Platform.OS === 'ios') {\n        return WebRTCModule.requestPermission(permissionDesc.name);\n      } else {\n        return Promise.reject(new TypeError(\"Unsupported platform.\"));\n      }\n    }\n  }]);\n  return Permissions;\n}();\n\nvar _default = new Permissions();\n\nexports.default = _default;","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/Permissions.js"],"names":["WebRTCModule","NativeModules","Permissions","RESULT","DENIED","GRANTED","PROMPT","VALID_PERMISSIONS","_lastReq","Promise","resolve","perm","reject","PermissionsAndroid","request","then","granted","RESULTS","permissionDesc","TypeError","name","indexOf","_validatePermissionDescriptior","e","Platform","OS","PERMISSIONS","CAMERA","RECORD_AUDIO","check","checkPermission","requestPermission","_requestPermissionAndroid"],"mappings":"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","sourcesContent":["'use strict';\n\nimport { NativeModules, PermissionsAndroid, Platform } from 'react-native';\n\nconst { WebRTCModule } = NativeModules;\n\n/**\n * Type declaration for a permissions descriptor.\n */\ntype PermissionDescriptor = {\n    name: string;\n}\n\n/**\n * Class implementing a subset of W3C's Permissions API as defined by:\n * https://www.w3.org/TR/permissions/\n */\nclass Permissions {\n    /**\n     * Possible result values for {@link query}, in accordance with:\n     * https://www.w3.org/TR/permissions/#status-of-a-permission\n     */\n    RESULT = {\n        DENIED: 'denied',\n        GRANTED: 'granted',\n        PROMPT: 'prompt'\n    };\n\n    /**\n     * This implementation only supports requesting these permissions, a subset\n     * of: https://www.w3.org/TR/permissions/#permission-registry\n     */\n    VALID_PERMISSIONS = [ 'camera', 'microphone' ];\n\n    _lastReq = Promise.resolve();\n\n    /**\n     * Helper for requesting Android permissions. On Android only one permission\n     * can be requested at a time (unless the multi-permission API is used,\n     * but we are not using that for symmetry with the W3C API for querying)\n     * so we'll queue them up.\n     * \n     * @param {string} perm - The requested permission from\n     * {@link PermissionsAndroid.PERMISSIONS}\n     * https://facebook.github.io/react-native/docs/permissionsandroid#permissions-that-require-prompting-the-user\n     */\n    _requestPermissionAndroid(perm) {\n        return new Promise((resolve, reject) => {\n            PermissionsAndroid.request(perm).then(\n                granted => resolve(granted === true || granted === PermissionsAndroid.RESULTS.GRANTED),\n                () => resolve(false));\n        });\n    }\n\n    /**\n     * Validates the given permission descriptor.\n     */\n    _validatePermissionDescriptior(permissionDesc) {\n        if (typeof permissionDesc !== \"object\") {\n            throw new TypeError(\"Argument 1 of Permissions.query is not an object.\");\n        }\n        if (typeof permissionDesc.name === \"undefined\") {\n            throw new TypeError(\"Missing required 'name' member of PermissionDescriptor.\");\n        }\n        if (this.VALID_PERMISSIONS.indexOf(permissionDesc.name) === -1) {\n            throw new TypeError(\"'name' member of PermissionDescriptor is not a valid value for enumeration PermissionName.\");\n        }\n    }\n\n    /**\n     * Method for querying the status of a permission, according to:\n     * https://www.w3.org/TR/permissions/#permissions-interface\n     */\n    query(permissionDesc: PermissionDescriptor) {\n        try {\n            this._validatePermissionDescriptior(permissionDesc);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        if (Platform.OS === 'android') {\n            const perm = permissionDesc.name === 'camera'\n                ? PermissionsAndroid.PERMISSIONS.CAMERA\n                : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n            return new Promise((resolve, reject) => {\n                PermissionsAndroid.check(perm).then(\n                    granted => resolve(granted ? this.RESULT.GRANTED : this.RESULT.PROMPT),\n                    () => resolve(this.RESULT.PROMPT));\n            });\n        } else if (Platform.OS === 'ios') {\n            return WebRTCModule.checkPermission(permissionDesc.name);\n        } else {\n            return Promise.reject(new TypeError(\"Unsupported platform.\"));\n        }\n    }\n\n    /**\n     * Custom method NOT defined by W3C's permissions API, which allows the\n     * caller to request a permission.\n     */\n    request(permissionDesc: PermissionDescriptor) {\n        try {\n            this._validatePermissionDescriptior(permissionDesc);\n        } catch (e) {\n            return Promise.reject(e);\n        }\n        if (Platform.OS === 'android') {\n            const perm = permissionDesc.name === 'camera'\n                ? PermissionsAndroid.PERMISSIONS.CAMERA\n                : PermissionsAndroid.PERMISSIONS.RECORD_AUDIO;\n            const requestPermission\n                = () => this._requestPermissionAndroid(perm);\n            this._lastReq\n                = this._lastReq.then(requestPermission, requestPermission);\n            return this._lastReq;\n        } else if (Platform.OS === 'ios') {\n            return WebRTCModule.requestPermission(permissionDesc.name);\n        } else {\n            return Promise.reject(new TypeError(\"Unsupported platform.\"));\n        }\n    }\n}\n\nexport default new Permissions();\n"]},"metadata":{},"sourceType":"script"}