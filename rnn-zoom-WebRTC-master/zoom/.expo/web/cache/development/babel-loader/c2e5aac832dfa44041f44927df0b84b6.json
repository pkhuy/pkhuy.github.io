{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNativeGestureHandler = require(\"react-native-gesture-handler\");\n\nvar _reactNativeWebrtc = require(\"react-native-webrtc\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _videoActions = require(\"./src/store/actions/videoActions\");\n\nvar _jsxFileName = \"F:\\\\Expo\\\\rnn-zoom-WebRTC\\\\zoom\\\\App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar App = function (_React$Component) {\n  (0, _inherits2.default)(App, _React$Component);\n\n  var _super = _createSuper(App);\n\n  function App(props) {\n    (0, _classCallCheck2.default)(this, App);\n    return _super.call(this, props);\n  }\n\n  (0, _createClass2.default)(App, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      var isFront = true;\n\n      _reactNativeWebrtc.mediaDevices.enumerateDevices().then(function (sourceInfos) {\n        console.log(sourceInfos);\n        var videoSourceId;\n\n        for (var i = 0; i < sourceInfos.length; i++) {\n          var sourceInfo = sourceInfos[i];\n\n          if (sourceInfo.kind == \"videoinput\" && sourceInfo.facing == (isFront ? \"front\" : \"environment\")) {\n            videoSourceId = sourceInfo.deviceId;\n          }\n        }\n\n        _reactNativeWebrtc.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            width: 640,\n            height: 480,\n            frameRate: 30,\n            facingMode: isFront ? \"user\" : \"environment\",\n            deviceId: videoSourceId\n          }\n        }).then(function (stream) {\n          _this.props.joinRoom(stream);\n        }).catch(function (error) {});\n      });\n    }\n  }, {\n    key: \"rennder\",\n    value: function rennder() {\n      var _this2 = this;\n\n      var _this$props$video = this.props.video,\n          streams = _this$props$video.streams,\n          remoteStreams = _this$props$video.remoteStreams;\n      console.log(remoteStreams);\n      return _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          justifyContent: 'flex-start',\n          padding: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          justifyContent: 'center',\n          height: height * 0.5,\n          borderColor: 'yellow',\n          borderWidth: 4\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }, this.props.video.myStream ? _react.default.createElement(_reactNativeWebrtc.RTCView, {\n        streamURL: this.props.video.myStream.toURL(),\n        style: {\n          width: width,\n          height: height * 0.4\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }) : null), _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          backgroundColor: 'black'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNativeGestureHandler.ScrollView, {\n        horizontal: true,\n        style: {\n          padding: 10\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_react.default.Fragment, null, streams.length > 0 ? _react.default.createElement(_react.default.Fragment, null, streams.map(function (_, index) {\n        return _react.default.createElement(_reactNative.View, {\n          key: index,\n          style: {\n            width: 200,\n            backgroundColor: 'red',\n            borderWidth: 1,\n            borderColor: '#fff',\n            marginRight: 10,\n            padding: 5\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }\n        }, _react.default.createElement(_reactNativeWebrtc.RTCView, {\n          streamURL: stream.toURL(),\n          style: {\n            width: 180,\n            height: height * 0.4\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }\n        }));\n      })) : null), remoteStreams.length > 0 ? _react.default.createElement(_react.default.Fragment, null, remoteStreams.map(function (stream, index) {\n        _react.default.createElement(_reactNative.View, {\n          key: index,\n          style: {\n            width: 200,\n            backgroundColor: 'blue',\n            borderWidth: 1,\n            borderColor: '#fff',\n            marginRight: 10,\n            justifyContent: 'center',\n            alignItems: 'center'\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 19\n          }\n        }, _react.default.createElement(_reactNativeWebrtc.RTCView, {\n          streamURL: _this2.props.video.myStream.toURL(),\n          style: {\n            width: width,\n            height: height * 0.4\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 21\n          }\n        }));\n      })) : null)));\n    }\n  }]);\n  return App;\n}(_react.default.Component);\n\nvar mapStateToProps = function mapStateToProps(_ref) {\n  var video = _ref.video;\n  return {\n    video: video\n  };\n};\n\nvar _default = (0, _reactRedux.connect)()(App);\n\nexports.default = _default;","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/App.js"],"names":["App","props","isFront","mediaDevices","enumerateDevices","then","sourceInfos","console","log","videoSourceId","i","length","sourceInfo","kind","facing","deviceId","getUserMedia","audio","video","width","height","frameRate","facingMode","stream","joinRoom","catch","error","streams","remoteStreams","flex","justifyContent","padding","borderColor","borderWidth","myStream","toURL","backgroundColor","map","_","index","marginRight","alignItems","React","Component","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { ScrollView } from 'react-native-gesture-handler';\r\nimport {\r\n  RTCView,\r\n  mediaDevices\r\n} from 'react-native-webrtc';\r\n\r\nimport { connect } from 'react-redux'\r\nimport { joinRoom } from './src/store/actions/videoActions'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  \r\n  componentDidMount() {\r\n    let isFront = true;\r\n    mediaDevices.enumerateDevices().then(sourceInfos => {\r\n      console.log(sourceInfos);\r\n      let videoSourceId;\r\n      for (let i = 0; i < sourceInfos.length; i++) {\r\n        const sourceInfo = sourceInfos[i];\r\n        if (sourceInfo.kind == \"videoinput\" && sourceInfo.facing == (isFront ? \"front\" : \"environment\")) {\r\n          videoSourceId = sourceInfo.deviceId;\r\n        }\r\n      }\r\n      mediaDevices.getUserMedia({\r\n        audio: false,\r\n        video: {\r\n          width: 640,\r\n          height: 480,\r\n          frameRate: 30,\r\n          facingMode: (isFront ? \"user\" : \"environment\"),\r\n          deviceId: videoSourceId\r\n        }\r\n      })\r\n        .then(stream => {\r\n          // Got stream!\r\n          this.props.joinRoom(stream);\r\n        })\r\n        .catch(error => {\r\n          // Log error\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  rennder() {\r\n    const { streams, remoteStreams } = this.props.video;\r\n    console.log(remoteStreams)\r\n\r\n    return (\r\n      <View style={{ flex: 1, justifyContent: 'flex-start', padding: 10 }}>\r\n        <View style={{ flex: 1, justifyContent: 'center', height: height * 0.5, borderColor: 'yellow', borderWidth: 4 }}>\r\n          {this.props.video.myStream ? (\r\n            <RTCView streamURL={this.props.video.myStream.toURL()}\r\n            style={{width, height: height * 0.4}}\r\n            />\r\n          ): null}\r\n        </View>\r\n        <View style={{ flex: 1, backgroundColor: 'black' }}>\r\n          <ScrollView horizontal style={{ padding: 10 }}>\r\n            <>\r\n              {streams.length > 0 ? (\r\n                <>\r\n                  {streams.map((_, index) => (\r\n                    <View\r\n                      key={index}\r\n                      style={{\r\n                        width: 200,\r\n                        backgroundColor: 'red',\r\n                        borderWidth: 1,\r\n                        borderColor: '#fff',\r\n                        marginRight: 10,\r\n                        padding: 5,\r\n                      }}>\r\n                        <RTCView streamURL={stream.toURL()}\r\n                          style={{ width: 180, height: height * 0.4 }}\r\n                        />\r\n                    </View>\r\n                  ))}\r\n                </>\r\n              ) : null}\r\n            </>\r\n\r\n            {remoteStreams.length > 0 ?\r\n\r\n              <>\r\n                {remoteStreams.map((stream, index) => {\r\n                  <View\r\n                  key={index}\r\n                    style={{\r\n                      width: 200,\r\n                      backgroundColor: 'blue',\r\n                      borderWidth: 1,\r\n                      borderColor: '#fff',\r\n                      marginRight: 10,\r\n                      justifyContent: 'center',\r\n                      alignItems: 'center',\r\n                    }}>\r\n                    <RTCView streamURL={this.props.video.myStream.toURL()}\r\n                      style={{ width, height: height * 0.4 }}\r\n                    />\r\n                  </View>\r\n                })}\r\n              </> : null}\r\n          </ScrollView>\r\n        </View>\r\n      </View>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ video }) => ({\r\n  video,  \r\n})\r\n\r\nexport default connect()(App);"]},"metadata":{},"sourceType":"script"}