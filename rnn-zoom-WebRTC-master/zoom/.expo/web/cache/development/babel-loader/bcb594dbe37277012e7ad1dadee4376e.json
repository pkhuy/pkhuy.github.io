{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventTargetShim = _interopRequireDefault(require(\"event-target-shim\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _MediaStream = _interopRequireDefault(require(\"./MediaStream\"));\n\nvar _MediaStreamEvent = _interopRequireDefault(require(\"./MediaStreamEvent\"));\n\nvar _MediaStreamTrack = _interopRequireDefault(require(\"./MediaStreamTrack\"));\n\nvar _MediaStreamTrackEvent = _interopRequireDefault(require(\"./MediaStreamTrackEvent\"));\n\nvar _RTCDataChannel = _interopRequireDefault(require(\"./RTCDataChannel\"));\n\nvar _RTCDataChannelEvent = _interopRequireDefault(require(\"./RTCDataChannelEvent\"));\n\nvar _RTCSessionDescription = _interopRequireDefault(require(\"./RTCSessionDescription\"));\n\nvar _RTCIceCandidate = _interopRequireDefault(require(\"./RTCIceCandidate\"));\n\nvar _RTCIceCandidateEvent = _interopRequireDefault(require(\"./RTCIceCandidateEvent\"));\n\nvar _RTCEvent = _interopRequireDefault(require(\"./RTCEvent\"));\n\nvar RTCUtil = _interopRequireWildcard(require(\"./RTCUtil\"));\n\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebRTCModule = _reactNative.NativeModules.WebRTCModule;\nvar PEER_CONNECTION_EVENTS = ['connectionstatechange', 'icecandidate', 'icecandidateerror', 'iceconnectionstatechange', 'icegatheringstatechange', 'negotiationneeded', 'signalingstatechange', 'datachannel', 'addstream', 'removestream'];\nvar nextPeerConnectionId = 0;\n\nvar RTCPeerConnection = function (_EventTarget) {\n  (0, _inherits2.default)(RTCPeerConnection, _EventTarget);\n\n  var _super = _createSuper(RTCPeerConnection);\n\n  function RTCPeerConnection(configuration) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RTCPeerConnection);\n    _this = _super.call(this);\n    _this.signalingState = 'stable';\n    _this.iceGatheringState = 'new';\n    _this.connectionState = 'new';\n    _this.iceConnectionState = 'new';\n    _this._localStreams = [];\n    _this._remoteStreams = [];\n    _this._peerConnectionId = nextPeerConnectionId++;\n    WebRTCModule.peerConnectionInit(configuration, _this._peerConnectionId);\n\n    _this._registerEvents();\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(RTCPeerConnection, [{\n    key: \"addStream\",\n    value: function addStream(stream) {\n      var index = this._localStreams.indexOf(stream);\n\n      if (index !== -1) {\n        return;\n      }\n\n      WebRTCModule.peerConnectionAddStream(stream._reactTag, this._peerConnectionId);\n\n      this._localStreams.push(stream);\n    }\n  }, {\n    key: \"removeStream\",\n    value: function removeStream(stream) {\n      var index = this._localStreams.indexOf(stream);\n\n      if (index === -1) {\n        return;\n      }\n\n      this._localStreams.splice(index, 1);\n\n      WebRTCModule.peerConnectionRemoveStream(stream._reactTag, this._peerConnectionId);\n    }\n  }, {\n    key: \"createOffer\",\n    value: function createOffer(options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionCreateOffer(_this2._peerConnectionId, RTCUtil.normalizeOfferAnswerOptions(options), function (successful, data) {\n          if (successful) {\n            resolve(new _RTCSessionDescription.default(data));\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"createAnswer\",\n    value: function createAnswer() {\n      var _this3 = this;\n\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionCreateAnswer(_this3._peerConnectionId, RTCUtil.normalizeOfferAnswerOptions(options), function (successful, data) {\n          if (successful) {\n            resolve(new _RTCSessionDescription.default(data));\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setConfiguration\",\n    value: function setConfiguration(configuration) {\n      WebRTCModule.peerConnectionSetConfiguration(configuration, this._peerConnectionId);\n    }\n  }, {\n    key: \"setLocalDescription\",\n    value: function setLocalDescription(sessionDescription) {\n      var _this4 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionSetLocalDescription(sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription, _this4._peerConnectionId, function (successful, data) {\n          if (successful) {\n            _this4.localDescription = new _RTCSessionDescription.default(data);\n            resolve();\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"setRemoteDescription\",\n    value: function setRemoteDescription(sessionDescription) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionSetRemoteDescription(sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription, _this5._peerConnectionId, function (successful, data) {\n          if (successful) {\n            _this5.remoteDescription = new _RTCSessionDescription.default(data);\n            resolve();\n          } else {\n            reject(data);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"addIceCandidate\",\n    value: function addIceCandidate(candidate) {\n      var _this6 = this;\n\n      if (!candidate || !candidate.candidate) {\n        return Promise.resolve();\n      }\n\n      return new Promise(function (resolve, reject) {\n        WebRTCModule.peerConnectionAddICECandidate(candidate.toJSON ? candidate.toJSON() : candidate, _this6._peerConnectionId, function (successful, data) {\n          if (successful) {\n            _this6.remoteDescription = new _RTCSessionDescription.default(data);\n            resolve();\n          } else {\n            reject(new Error('Failed to add ICE candidate'));\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getStats\",\n    value: function getStats() {\n      return WebRTCModule.peerConnectionGetStats(this._peerConnectionId).then(function (data) {\n        return new Map(JSON.parse(data));\n      });\n    }\n  }, {\n    key: \"getLocalStreams\",\n    value: function getLocalStreams() {\n      return this._localStreams.slice();\n    }\n  }, {\n    key: \"getRemoteStreams\",\n    value: function getRemoteStreams() {\n      return this._remoteStreams.slice();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      WebRTCModule.peerConnectionClose(this._peerConnectionId);\n    }\n  }, {\n    key: \"_getTrack\",\n    value: function _getTrack(streamReactTag, trackId) {\n      var stream = this._remoteStreams.find(function (stream) {\n        return stream._reactTag === streamReactTag;\n      });\n\n      return stream && stream._tracks.find(function (track) {\n        return track.id === trackId;\n      });\n    }\n  }, {\n    key: \"_unregisterEvents\",\n    value: function _unregisterEvents() {\n      this._subscriptions.forEach(function (e) {\n        return e.remove();\n      });\n\n      this._subscriptions = [];\n    }\n  }, {\n    key: \"_registerEvents\",\n    value: function _registerEvents() {\n      var _this7 = this;\n\n      this._subscriptions = [_EventEmitter.default.addListener('peerConnectionOnRenegotiationNeeded', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        _this7.dispatchEvent(new _RTCEvent.default('negotiationneeded'));\n      }), _EventEmitter.default.addListener('peerConnectionIceConnectionChanged', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        _this7.iceConnectionState = ev.iceConnectionState;\n\n        _this7.dispatchEvent(new _RTCEvent.default('iceconnectionstatechange'));\n\n        if (ev.iceConnectionState === 'closed') {\n          _this7._unregisterEvents();\n        }\n      }), _EventEmitter.default.addListener('peerConnectionStateChanged', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        _this7.connectionState = ev.connectionState;\n\n        _this7.dispatchEvent(new _RTCEvent.default('connectionstatechange'));\n\n        if (ev.connectionState === 'closed') {\n          _this7._unregisterEvents();\n        }\n      }), _EventEmitter.default.addListener('peerConnectionSignalingStateChanged', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        _this7.signalingState = ev.signalingState;\n\n        _this7.dispatchEvent(new _RTCEvent.default('signalingstatechange'));\n      }), _EventEmitter.default.addListener('peerConnectionAddedStream', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        var stream = new _MediaStream.default(ev);\n\n        _this7._remoteStreams.push(stream);\n\n        _this7.remoteDescription = new _RTCSessionDescription.default(ev.sdp);\n\n        _this7.dispatchEvent(new _MediaStreamEvent.default('addstream', {\n          stream: stream\n        }));\n      }), _EventEmitter.default.addListener('peerConnectionRemovedStream', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        var stream = _this7._remoteStreams.find(function (s) {\n          return s._reactTag === ev.streamId;\n        });\n\n        if (stream) {\n          var index = _this7._remoteStreams.indexOf(stream);\n\n          if (index !== -1) {\n            _this7._remoteStreams.splice(index, 1);\n          }\n        }\n\n        _this7.remoteDescription = new _RTCSessionDescription.default(ev.sdp);\n\n        _this7.dispatchEvent(new _MediaStreamEvent.default('removestream', {\n          stream: stream\n        }));\n      }), _EventEmitter.default.addListener('mediaStreamTrackMuteChanged', function (ev) {\n        if (ev.peerConnectionId !== _this7._peerConnectionId) {\n          return;\n        }\n\n        var track = _this7._getTrack(ev.streamReactTag, ev.trackId);\n\n        if (track) {\n          track.muted = ev.muted;\n          var eventName = ev.muted ? 'mute' : 'unmute';\n          track.dispatchEvent(new _MediaStreamTrackEvent.default(eventName, {\n            track: track\n          }));\n        }\n      }), _EventEmitter.default.addListener('peerConnectionGotICECandidate', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        _this7.localDescription = new _RTCSessionDescription.default(ev.sdp);\n        var candidate = new _RTCIceCandidate.default(ev.candidate);\n        var event = new _RTCIceCandidateEvent.default('icecandidate', {\n          candidate: candidate\n        });\n\n        _this7.dispatchEvent(event);\n      }), _EventEmitter.default.addListener('peerConnectionIceGatheringChanged', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        _this7.iceGatheringState = ev.iceGatheringState;\n\n        if (_this7.iceGatheringState === 'complete') {\n          _this7.localDescription = new _RTCSessionDescription.default(ev.sdp);\n\n          _this7.dispatchEvent(new _RTCIceCandidateEvent.default('icecandidate', null));\n        }\n\n        _this7.dispatchEvent(new _RTCEvent.default('icegatheringstatechange'));\n      }), _EventEmitter.default.addListener('peerConnectionDidOpenDataChannel', function (ev) {\n        if (ev.id !== _this7._peerConnectionId) {\n          return;\n        }\n\n        var channel = new _RTCDataChannel.default(ev.dataChannel);\n\n        _this7.dispatchEvent(new _RTCDataChannelEvent.default('datachannel', {\n          channel: channel\n        }));\n      })];\n    }\n  }, {\n    key: \"createDataChannel\",\n    value: function createDataChannel(label, dataChannelDict) {\n      if (dataChannelDict && 'id' in dataChannelDict) {\n        var id = dataChannelDict.id;\n\n        if (typeof id !== 'number') {\n          throw new TypeError('DataChannel id must be a number: ' + id);\n        }\n      }\n\n      var channelInfo = WebRTCModule.createDataChannel(this._peerConnectionId, label, dataChannelDict);\n\n      if (channelInfo === null) {\n        throw new TypeError('Failed to create new DataChannel');\n      }\n\n      return new _RTCDataChannel.default(channelInfo);\n    }\n  }]);\n  return RTCPeerConnection;\n}((0, _eventTargetShim.default)(PEER_CONNECTION_EVENTS));\n\nexports.default = RTCPeerConnection;","map":{"version":3,"sources":["F:/Expo/rnn-zoom-WebRTC/zoom/node_modules/react-native-webrtc/RTCPeerConnection.js"],"names":["WebRTCModule","NativeModules","PEER_CONNECTION_EVENTS","nextPeerConnectionId","RTCPeerConnection","configuration","signalingState","iceGatheringState","connectionState","iceConnectionState","_localStreams","_remoteStreams","_peerConnectionId","peerConnectionInit","_registerEvents","stream","index","indexOf","peerConnectionAddStream","_reactTag","push","splice","peerConnectionRemoveStream","options","Promise","resolve","reject","peerConnectionCreateOffer","RTCUtil","normalizeOfferAnswerOptions","successful","data","RTCSessionDescription","peerConnectionCreateAnswer","peerConnectionSetConfiguration","sessionDescription","peerConnectionSetLocalDescription","toJSON","localDescription","peerConnectionSetRemoteDescription","remoteDescription","candidate","peerConnectionAddICECandidate","Error","peerConnectionGetStats","then","Map","JSON","parse","slice","peerConnectionClose","streamReactTag","trackId","find","_tracks","track","id","_subscriptions","forEach","e","remove","EventEmitter","addListener","ev","dispatchEvent","RTCEvent","_unregisterEvents","MediaStream","sdp","MediaStreamEvent","s","streamId","peerConnectionId","_getTrack","muted","eventName","MediaStreamTrackEvent","RTCIceCandidate","event","RTCIceCandidateEvent","channel","RTCDataChannel","dataChannel","RTCDataChannelEvent","label","dataChannelDict","TypeError","channelInfo","createDataChannel"],"mappings":"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","sourcesContent":["'use strict';\n\nimport EventTarget from 'event-target-shim';\nimport { NativeModules } from 'react-native';\n\nimport MediaStream from './MediaStream';\nimport MediaStreamEvent from './MediaStreamEvent';\nimport MediaStreamTrack from './MediaStreamTrack';\nimport MediaStreamTrackEvent from './MediaStreamTrackEvent';\nimport RTCDataChannel from './RTCDataChannel';\nimport RTCDataChannelEvent from './RTCDataChannelEvent';\nimport RTCSessionDescription from './RTCSessionDescription';\nimport RTCIceCandidate from './RTCIceCandidate';\nimport RTCIceCandidateEvent from './RTCIceCandidateEvent';\nimport RTCEvent from './RTCEvent';\nimport * as RTCUtil from './RTCUtil';\nimport EventEmitter from './EventEmitter';\n\nconst { WebRTCModule } = NativeModules;\n\ntype RTCSignalingState =\n  'stable' |\n  'have-local-offer' |\n  'have-remote-offer' |\n  'have-local-pranswer' |\n  'have-remote-pranswer' |\n  'closed';\n\ntype RTCIceGatheringState =\n  'new' |\n  'gathering' |\n  'complete';\n\ntype RTCPeerConnectionState =\n  'new' |\n  'connecting' |\n  'connected' |\n  'disconnected' |\n  'failed' |\n  'closed';\n\ntype RTCIceConnectionState =\n  'new' |\n  'checking' |\n  'connected' |\n  'completed' |\n  'failed' |\n  'disconnected' |\n  'closed';\n\ntype RTCDataChannelInit = {\n    ordered?: boolean;\n    maxPacketLifeTime?: number;\n    maxRetransmits?: number;\n    protocol?: string;\n    negotiated?: boolean;\n    id?: number;\n};\n\nconst PEER_CONNECTION_EVENTS = [\n  'connectionstatechange',\n  'icecandidate',\n  'icecandidateerror',\n  'iceconnectionstatechange',\n  'icegatheringstatechange',\n  'negotiationneeded',\n  'signalingstatechange',\n  // Peer-to-peer Data API:\n  'datachannel',\n  // old:\n  'addstream',\n  'removestream',\n];\n\nlet nextPeerConnectionId = 0;\n\nexport default class RTCPeerConnection extends EventTarget(PEER_CONNECTION_EVENTS) {\n  localDescription: RTCSessionDescription;\n  remoteDescription: RTCSessionDescription;\n\n  signalingState: RTCSignalingState = 'stable';\n  iceGatheringState: RTCIceGatheringState = 'new';\n  connectionState: RTCPeerConnectionState = 'new';\n  iceConnectionState: RTCIceConnectionState = 'new';\n\n  onconnectionstatechange: ?Function;\n  onicecandidate: ?Function;\n  onicecandidateerror: ?Function;\n  oniceconnectionstatechange: ?Function;\n  onicegatheringstatechange: ?Function;\n  onnegotiationneeded: ?Function;\n  onsignalingstatechange: ?Function;\n\n  onaddstream: ?Function;\n  onremovestream: ?Function;\n\n  _peerConnectionId: number;\n  _localStreams: Array<MediaStream> = [];\n  _remoteStreams: Array<MediaStream> = [];\n  _subscriptions: Array<any>;\n\n  constructor(configuration) {\n    super();\n    this._peerConnectionId = nextPeerConnectionId++;\n    WebRTCModule.peerConnectionInit(configuration, this._peerConnectionId);\n    this._registerEvents();\n  }\n\n  addStream(stream: MediaStream) {\n      const index = this._localStreams.indexOf(stream);\n      if (index !== -1) {\n          return;\n      }\n      WebRTCModule.peerConnectionAddStream(stream._reactTag, this._peerConnectionId);\n      this._localStreams.push(stream);\n  }\n\n  removeStream(stream: MediaStream) {\n      const index = this._localStreams.indexOf(stream);\n      if (index === -1) {\n          return;\n      }\n      this._localStreams.splice(index, 1);\n      WebRTCModule.peerConnectionRemoveStream(stream._reactTag, this._peerConnectionId);\n  }\n\n  createOffer(options) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionCreateOffer(\n        this._peerConnectionId,\n        RTCUtil.normalizeOfferAnswerOptions(options),\n        (successful, data) => {\n          if (successful) {\n            resolve(new RTCSessionDescription(data));\n          } else {\n            reject(data); // TODO: convert to NavigatorUserMediaError\n          }\n        });\n    });\n  }\n\n  createAnswer(options = {}) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionCreateAnswer(\n        this._peerConnectionId,\n        RTCUtil.normalizeOfferAnswerOptions(options),\n        (successful, data) => {\n          if (successful) {\n            resolve(new RTCSessionDescription(data));\n          } else {\n            reject(data);\n          }\n        });\n    });\n  }\n\n  setConfiguration(configuration) {\n    WebRTCModule.peerConnectionSetConfiguration(configuration, this._peerConnectionId);\n  }\n\n  setLocalDescription(sessionDescription: RTCSessionDescription) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionSetLocalDescription(\n        sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription,\n        this._peerConnectionId,\n        (successful, data) => {\n          if (successful) {\n            this.localDescription = new RTCSessionDescription(data);\n            resolve();\n          } else {\n            reject(data);\n          }\n      });\n    });\n  }\n\n  setRemoteDescription(sessionDescription: RTCSessionDescription) {\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionSetRemoteDescription(\n        sessionDescription.toJSON ? sessionDescription.toJSON() : sessionDescription,\n        this._peerConnectionId,\n        (successful, data) => {\n          if (successful) {\n            this.remoteDescription = new RTCSessionDescription(data);\n            resolve();\n          } else {\n            reject(data);\n          }\n      });\n    });\n  }\n\n  addIceCandidate(candidate) {\n    if (!candidate || !candidate.candidate) {\n      // TODO: support end-of-candidates, native crashes at this time.\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      WebRTCModule.peerConnectionAddICECandidate(\n        candidate.toJSON ? candidate.toJSON() : candidate,\n        this._peerConnectionId,\n        (successful, data) => {\n          if (successful) {\n            this.remoteDescription = new RTCSessionDescription(data);\n            resolve();\n          } else {\n            // XXX: This should be OperationError\n            reject(new Error('Failed to add ICE candidate'));\n          }\n      });\n    });\n  }\n\n  getStats() {\n    return WebRTCModule.peerConnectionGetStats(this._peerConnectionId)\n        .then( data =>  {\n           /* On both Android and iOS it is faster to construct a single\n            JSON string representing the Map of StatsReports and have it\n            pass through the React Native bridge rather than the Map of\n            StatsReports. While the implementations do try to be faster in\n            general, the stress is on being faster to pass through the React\n            Native bridge which is a bottleneck that tends to be visible in\n            the UI when there is congestion involving UI-related passing.\n\n            TODO Implement the logic for filtering the stats based on \n            the sender/receiver\n            */\n            return new Map(JSON.parse(data));\n        });\n  }\n\n  getLocalStreams() {\n    return this._localStreams.slice();\n  }\n\n  getRemoteStreams() {\n    return this._remoteStreams.slice();\n  }\n\n  close() {\n    WebRTCModule.peerConnectionClose(this._peerConnectionId);\n  }\n\n  _getTrack(streamReactTag, trackId): MediaStreamTrack {\n    const stream\n      = this._remoteStreams.find(\n          stream => stream._reactTag === streamReactTag);\n\n    return stream && stream._tracks.find(track => track.id === trackId);\n  }\n\n  _unregisterEvents(): void {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _registerEvents(): void {\n    this._subscriptions = [\n      EventEmitter.addListener('peerConnectionOnRenegotiationNeeded', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.dispatchEvent(new RTCEvent('negotiationneeded'));\n      }),\n      EventEmitter.addListener('peerConnectionIceConnectionChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.iceConnectionState = ev.iceConnectionState;\n        this.dispatchEvent(new RTCEvent('iceconnectionstatechange'));\n        if (ev.iceConnectionState === 'closed') {\n          // This PeerConnection is done, clean up event handlers.\n          this._unregisterEvents();\n        }\n      }),\n      EventEmitter.addListener('peerConnectionStateChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.connectionState = ev.connectionState;\n        this.dispatchEvent(new RTCEvent('connectionstatechange'));\n        if (ev.connectionState === 'closed') {\n          // This PeerConnection is done, clean up event handlers.\n          this._unregisterEvents();\n        }\n      }),\n      EventEmitter.addListener('peerConnectionSignalingStateChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.signalingState = ev.signalingState;\n        this.dispatchEvent(new RTCEvent('signalingstatechange'));\n      }),\n      EventEmitter.addListener('peerConnectionAddedStream', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const stream = new MediaStream(ev);\n        this._remoteStreams.push(stream);\n        this.remoteDescription = new RTCSessionDescription(ev.sdp);\n        this.dispatchEvent(new MediaStreamEvent('addstream', {stream}));\n      }),\n      EventEmitter.addListener('peerConnectionRemovedStream', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const stream = this._remoteStreams.find(s => s._reactTag === ev.streamId);\n        if (stream) {\n          const index = this._remoteStreams.indexOf(stream);\n          if (index !== -1) {\n            this._remoteStreams.splice(index, 1);\n          }\n        }\n        this.remoteDescription = new RTCSessionDescription(ev.sdp);\n        this.dispatchEvent(new MediaStreamEvent('removestream', {stream}));\n      }),\n      EventEmitter.addListener('mediaStreamTrackMuteChanged', ev => {\n        if (ev.peerConnectionId !== this._peerConnectionId) {\n          return;\n        }\n        const track = this._getTrack(ev.streamReactTag, ev.trackId);\n        if (track) {\n          track.muted = ev.muted;\n          const eventName = ev.muted ? 'mute' : 'unmute';\n          track.dispatchEvent(new MediaStreamTrackEvent(eventName, {track}));\n        }\n      }),\n      EventEmitter.addListener('peerConnectionGotICECandidate', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.localDescription = new RTCSessionDescription(ev.sdp);\n        const candidate = new RTCIceCandidate(ev.candidate);\n        const event = new RTCIceCandidateEvent('icecandidate', {candidate});\n        this.dispatchEvent(event);\n      }),\n      EventEmitter.addListener('peerConnectionIceGatheringChanged', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        this.iceGatheringState = ev.iceGatheringState;\n\n        if (this.iceGatheringState === 'complete') {\n          this.localDescription = new RTCSessionDescription(ev.sdp);\n          this.dispatchEvent(new RTCIceCandidateEvent('icecandidate', null));\n        }\n\n        this.dispatchEvent(new RTCEvent('icegatheringstatechange'));\n      }),\n      EventEmitter.addListener('peerConnectionDidOpenDataChannel', ev => {\n        if (ev.id !== this._peerConnectionId) {\n          return;\n        }\n        const channel = new RTCDataChannel(ev.dataChannel);\n        this.dispatchEvent(new RTCDataChannelEvent('datachannel', {channel}));\n      })\n    ];\n  }\n\n  /**\n   * Creates a new RTCDataChannel object with the given label. The\n   * RTCDataChannelInit dictionary can be used to configure properties of the\n   * underlying channel such as data reliability.\n   *\n   * @param {string} label - the value with which the label attribute of the new\n   * instance is to be initialized\n   * @param {RTCDataChannelInit} dataChannelDict - an optional dictionary of\n   * values with which to initialize corresponding attributes of the new\n   * instance such as id\n   */\n  createDataChannel(label: string, dataChannelDict?: ?RTCDataChannelInit) {\n    if (dataChannelDict && 'id' in dataChannelDict) {\n      const id = dataChannelDict.id;\n      if (typeof id !== 'number') {\n        throw new TypeError('DataChannel id must be a number: ' + id);\n      }\n    }\n\n    const channelInfo = WebRTCModule.createDataChannel(\n        this._peerConnectionId,\n        label,\n        dataChannelDict);\n\n    if (channelInfo === null) {\n      throw new TypeError('Failed to create new DataChannel');\n    }\n\n    return new RTCDataChannel(channelInfo);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}